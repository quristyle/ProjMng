@inherits BaseComponent

<RadzenSidebar Responsive="false" @bind-Expanded="SidebarExpanded" class="" style="display: flex; flex-direction: column">
    <div style="padding: 1rem">
      <RadzenTextBox id="find" 
        Placeholder="Find page ..." 
        type="search" 
        @oninput="@FilterPanelMenu" 
        style="width: calc(100% - 25px);" 
        class="rz-search-input" aria-label="find" />
      <a class="action" style="    margin-top: 10px;" @onclick=OnLoadMenu ><i class="bi bi-arrow-clockwise"></i></a>
    </div>




    <div style="flex: 1; overflow: auto">

      <RadzenPanelMenu 
        
        
        
        Match="NavLinkMatch.Prefix">

        @if (Data != null) {

          

              @foreach (var p in Data) {
            <RadzenPanelMenuItem  Text=@p.mnu_nm Icon="" Expanded=@(p.Children.Count>0) >

              @if( p.Children.Count>0 ){
                
                @foreach (var p2 in p.Children) {


                    @if( string.IsNullOrEmpty( p2.pgm_id) ){
                      <RadzenPanelMenuItem  Text=@p2.mnu_nm Icon="" Expanded=@(@p2.Children.Count>0) >
                      </RadzenPanelMenuItem>
                    }
                    else{
                      <div @oncontextmenu="(e => ShowContextMenuWithContent(e, p2))"  @oncontextmenu:preventDefault="true"   >
                        <RadzenPanelMenuItem 
                          Click=@(()=>AddCallTab(p2)) 
                          Text="@p2.mnu_nm"
                          Icon="" 
                          aria-label=""
                          title="@(@p2.pgm_id)"                
                        >
          
                        </RadzenPanelMenuItem>
                      </div>
                    }
                                     
            
                }

              }
            </RadzenPanelMenuItem>

            }


          


        }

      </RadzenPanelMenu>

    </div>
  </RadzenSidebar>
  



@code {

  
    protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      await OnLoadMenu();

    }
    /*
    var currentUrl = UriHelper.Uri;
    var baseUri = UriHelper.BaseUri;
    var relativeUrl = currentUrl.Replace(baseUri, string.Empty);

    if ((_openPageUrl != relativeUrl) && !string.IsNullOrEmpty(relativeUrl) && !relativeUrl.StartsWith('?')) {
      _openPageUrl = relativeUrl;
      IsBodyUrl = false;
      StateHasChanged();
    }

    if ( !IsBodyUrl && (_openPageUrl != relativeUrl)  ) {
      _openPageUrl = relativeUrl;
      IsBodyUrl = true;
      StateHasChanged();
    }
    */

  }


  

  void FilterPanelMenu(ChangeEventArgs args) {
    var term = args.Value??string.Empty;
    /*
    if (string.IsNullOrEmpty(term?.ToString())) {

      dirs.ForEach(menuDir =>
{
    Console.WriteLine($"Before2: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
        menuDir.expend = menuDir.pre_expend; // 값 복사

        menuDir.first_memory = false;
    Console.WriteLine($"After2: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
});

    //  _Data = _Data2;
    }
    else {


      dirs.ForEach(menuDir =>
{
    Console.WriteLine($"Before: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
      if(  !menuDir.first_memory ){
    menuDir.pre_expend = menuDir.expend; // 값 복사
          menuDir.first_memory = true;
      }
    menuDir.expend = true; // 새로운 값 설정
    Console.WriteLine($"After: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
});


      _Data = _Data2?.Where(x => 
        x["title"].ToString().Contains(term.ToString(), StringComparison.OrdinalIgnoreCase)||
        x["description"].ToString().Contains(term.ToString(), StringComparison.OrdinalIgnoreCase) ||
        x["url"].ToString().Contains(term.ToString(), StringComparison.OrdinalIgnoreCase)
      );
      
    }
    StateHasChanged();
    */
  }

 

  

  //public List<MenuDir> dirs { get; set; } = new List<MenuDir>();
  //public ResultInfo<Dictionary<string, object>>? Data { get; set; }
  public List<MenuInfo> Data { get; set; }
  //public IEnumerable<Dictionary<string, object>>? _Data2 { get; set; }


  protected async Task OnLoadMenu() {
    if (jsiniService != null) {

      
        var rdata = await DbCont<MenuInfo>("sp_dev_menu_auth", new Dictionary<string, string>() {
        { "srch_type",  "main" }
        });
        
       //Data = rdata.Data;
       Data = MenuInfo.BuildMenuTree(rdata.Data);


      /*


      try {
        var data = await jsiniService.GetList<Dictionary<string, object>>("md_blazor_scan", new Dictionary<string, string>(){{"prj_rid","3"}});

        if (data != null && data.Data != null) {
          dirs.Clear(); // 기존 데이터를 초기화하여 중복된 키를 방지

          var groupedData = data.Data
              .Where(d => d.ContainsKey("dir"))
              .GroupBy(d => d["dir"].ToString())
              .Select(g => g.First());

          foreach (var d in groupedData) {
            dirs.Add(new MenuDir() {
                  dir = d["dir"].ToString(),
                  expend = false
                });
           // dirs[d["dir"].ToString()] = d["dir"].ToString();
          }

          _Data2 = data.Data.OrderBy(d => d["sort"].ToString());

          _Data = _Data2;
        }
        else {
          Console.WriteLine("Data or Data.Data is null.");
        }
      }
      catch (Exception ex) {
        Console.WriteLine($"An error occurred: {ex.Message}");
      }
      finally {
        // 비동기 작업이 완료된 후 상태 변경을 반영
        StateHasChanged();
      }

      */
      
    }
    else {
      Console.WriteLine("JsiniService is null.");
    }StateHasChanged();
  }

  [Parameter]
    public EventCallback<MenuInfo> OnCallTab { get; set; }

    void AddCallTab(MenuInfo p)    {
        if (OnCallTab.HasDelegate)        {
            OnCallTab.InvokeAsync(p);
        }
    }

[Parameter]
    public bool SidebarExpanded { get; set; }
    [Parameter]
    public EventCallback<bool> SidebarExpandedChanged { get; set; }



  /*
  private void AddCallTab(Dictionary<string, object> p) {

    if (p.ContainsKey("fullname") && p["fullname"] != null &&
        p.ContainsKey("title") && p["title"] != null &&
        p.ContainsKey("name") && p["name"] != null &&
        p.ContainsKey("url") && p["url"] != null &&
        p.ContainsKey("dir") && p["dir"] != null) {

      // _main.AddItem(p["fullname"].ToString()??string.Empty,
      //               p["title"].ToString() ?? string.Empty,
      //               p["name"].ToString() ?? string.Empty,
      //               p["url"].ToString() ?? string.Empty,
      //               p["dir"].ToString() ?? string.Empty);
    }
    else {
      Console.WriteLine("One or more keys are missing or null in the dictionary.");
    }
    
  }
  */


  void ShowContextMenuWithContent(MouseEventArgs args, MenuInfo item) => ContextMenuService.Open(args, ds =>
  @<RadzenMenu Click="@( ( MenuItemEventArgs ee) =>  OnMenuItemClick(ee, item))">

    <RadzenMenuItem Text=@("Open "+item.mnu_url) Value="1"></RadzenMenuItem>
    <RadzenMenuItem Text=@( item.pgm_id) Value="2"></RadzenMenuItem>


    <RadzenMenuItem Text="More items" Value="3">
      <RadzenMenuItem Text="More sub items" Value="4">
        <RadzenMenuItem Text="Item1" Value="5"></RadzenMenuItem>
        <RadzenMenuItem Text="Item2" Value="6"></RadzenMenuItem>
      </RadzenMenuItem>
    </RadzenMenuItem>
  </RadzenMenu>);

  void OnMenuItemClick(MenuItemEventArgs args, MenuInfo item) {


    Console.WriteLine($"Clicked on {args.Value}");


    if (args.Value.Equals(1)) {
      // Open URL
      string url = item.mnu_url;
      if (!string.IsNullOrEmpty(url)) {
        navigationManager.NavigateTo(url);
      }
    }
    else if (args.Value.Equals(2)) {
    var str = item.pgm_id;
     jsRuntime.InvokeVoidAsync("copyClipboard", str);
  
    }
    else if (args.Value.Equals(3)) {
      // Do something else
    }
    else if (args.Value.Equals(4)) {
      // Do something else
    }
    if (!args.Value.Equals(3) && !args.Value.Equals(4)) {
    ContextMenuService.Close();
    }
  }







  // public class MenuDir {
  //   public string? dir { get; set; }
  //   public bool expend { get; set; } = false;
  //   public bool pre_expend { get; set; } = false;
  //   public bool first_memory { get; set; } = false;
  // }





}
