@inherits BaseComponent

<RadzenSidebar Responsive="false" @bind-Expanded="SidebarExpanded" class="quri_sidebarmenu" style="display: flex; flex-direction: column">
    <div style="padding: 1rem">
      <RadzenTextBox id="find" 
        Placeholder="Find page ..." 
        type="search" 
        @oninput="@FilterPanelMenu" 
        style="width: calc(100% - 25px);" 
        class="rz-search-input" aria-label="find" />
      <a class="action" style="    margin-top: 10px;" @onclick=OnLoadMenu ><i class="bi bi-arrow-clockwise"></i></a>
    </div>


    <div style="flex: 1; overflow: auto">

      <RadzenPanelMenu 
        
        
        Match="NavLinkMatch.Prefix">

        @if (Data != null) {

          
          @if(false){
              @foreach (var p in Data) {
            <RadzenPanelMenuItem  Text=@p.mnu_nm Icon="" Expanded=@(p.Children.Count>0) >

              @if( p.Children.Count>0 ){
                
                @foreach (var p2 in p.Children) {


                    @if( string.IsNullOrEmpty( p2.pgm_id) ){
                      <RadzenPanelMenuItem  Text=@p2.mnu_nm Icon="" Expanded=@(@p2.Children.Count>0) >
                      </RadzenPanelMenuItem>
                    }
                    else{
                      <div @oncontextmenu="(e => ShowContextMenuWithContent(e, p2))"  @oncontextmenu:preventDefault="true"   >
                        <RadzenPanelMenuItem 
                          Click=@(()=>AddCallTab(p2)) 
                          Text="@p2.mnu_nm"
                          Icon="" 
                          aria-label=""
                          title="@(@p2.pgm_id)"                
                        >
          
                        </RadzenPanelMenuItem>
                      </div>
                    }
                                     
            
                }

              }
            </RadzenPanelMenuItem>

            }
            }


             @foreach (var menu in Data)                {
                    @RenderMenuMarkup(menu)
                }
          


        }

      </RadzenPanelMenu>

    </div>
  </RadzenSidebar>
  



@code {

  
    protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      await OnLoadMenu();

    }
    /*
    var currentUrl = UriHelper.Uri;
    var baseUri = UriHelper.BaseUri;
    var relativeUrl = currentUrl.Replace(baseUri, string.Empty);

    if ((_openPageUrl != relativeUrl) && !string.IsNullOrEmpty(relativeUrl) && !relativeUrl.StartsWith('?')) {
      _openPageUrl = relativeUrl;
      IsBodyUrl = false;
      StateHasChanged();
    }

    if ( !IsBodyUrl && (_openPageUrl != relativeUrl)  ) {
      _openPageUrl = relativeUrl;
      IsBodyUrl = true;
      StateHasChanged();
    }
    */

  }


  

  void FilterPanelMenu(ChangeEventArgs args) {
    var term = args.Value??string.Empty;
    /*
    if (string.IsNullOrEmpty(term?.ToString())) {

      dirs.ForEach(menuDir =>
{
    Console.WriteLine($"Before2: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
        menuDir.expend = menuDir.pre_expend; // 값 복사

        menuDir.first_memory = false;
    Console.WriteLine($"After2: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
});

    //  _Data = _Data2;
    }
    else {


      dirs.ForEach(menuDir =>
{
    Console.WriteLine($"Before: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
      if(  !menuDir.first_memory ){
    menuDir.pre_expend = menuDir.expend; // 값 복사
          menuDir.first_memory = true;
      }
    menuDir.expend = true; // 새로운 값 설정
    Console.WriteLine($"After: pre_expend = {menuDir.pre_expend}, expend = {menuDir.expend}");
});


      _Data = _Data2?.Where(x => 
        x["title"].ToString().Contains(term.ToString(), StringComparison.OrdinalIgnoreCase)||
        x["description"].ToString().Contains(term.ToString(), StringComparison.OrdinalIgnoreCase) ||
        x["url"].ToString().Contains(term.ToString(), StringComparison.OrdinalIgnoreCase)
      );
      
    }
    StateHasChanged();
    */
  }

 


     RenderFragment RenderMenuItem(MenuInfo menu) => builder =>    {
        int seq = 0;
        if (string.IsNullOrEmpty(menu.pgm_id))        {
            builder.OpenComponent<RadzenPanelMenuItem>(seq++);
            builder.AddAttribute(seq++, "Text", menu.mnu_nm);
            builder.AddAttribute(seq++, "Icon", "");
            builder.AddAttribute(seq++, "Expanded", menu.Children?.Count > 0);

            if (menu.Children != null && menu.Children.Count > 0)            {
                builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(childBuilder =>                {
                    foreach (var child in menu.Children)                    {
                        childBuilder.AddContent(seq++, RenderMenuItem(child));
                    }
                }));
            }
            builder.CloseComponent();
        }
        else        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "oncontextmenu", EventCallback.Factory.Create<MouseEventArgs>(this, e => ShowContextMenuWithContent(e, menu)));
            builder.AddAttribute(seq++, "oncontextmenu:preventDefault", true);

            builder.OpenComponent<RadzenPanelMenuItem>(seq++);
            builder.AddAttribute(seq++, "Text", menu.mnu_nm);
            builder.AddAttribute(seq++, "Icon", "");
            builder.AddAttribute(seq++, "title", menu.pgm_id);
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => AddCallTab(menu)));
          // builder.AddAttribute(seq++, "Click", EventCallback.Factory.Create(this, () => AddCallTab(menu)));
            builder.CloseComponent();

            builder.CloseElement();
        }
    };

    RenderFragment RenderMenuMarkup2(MenuInfo menu) => 
    @<RadzenPanelMenuItem Text="@(menu.mnu_nm +"  "+ menu.Children?.Count)" Icon="" Expanded="@(menu.Children?.Count > 0)" title="@menu.pgm_id">
        @if (menu.Children != null && menu.Children.Count > 0)        {
            @foreach (var child in menu.Children)            {
                @RenderMenuMarkup2(child)
            }
        }
        else if (!string.IsNullOrEmpty(menu.pgm_id))        {
            <div @oncontextmenu="(e => ShowContextMenuWithContent(e, menu))" @oncontextmenu:preventDefault="true">
                <RadzenPanelMenuItem
                    Text="@menu.mnu_nm"
                    Icon=""
                    title="@menu.pgm_id"
                    Click="() => AddCallTab(menu)">
                </RadzenPanelMenuItem>
            </div>
        }
    </RadzenPanelMenuItem>;






    
    RenderFragment RenderMenuMarkup(MenuInfo p2) => 
                    @<div>@if( string.IsNullOrEmpty( p2.pgm_id) ){
                      <RadzenPanelMenuItem  Text=@p2.mnu_nm Icon="" Expanded=@(@p2.Children.Count>0) class="@((@p2.Children.Count>0)?"menu-fold":"")" >
                        @if (p2.Children != null && p2.Children.Count > 0)        {
                            @foreach (var child in p2.Children)            {
                                @RenderMenuMarkup(child)
                            }
                        }

                      </RadzenPanelMenuItem>
                    }
                    else{
                      <div @oncontextmenu="(e => ShowContextMenuWithContent(e, p2))"  @oncontextmenu:preventDefault="true"   >
                        <RadzenPanelMenuItem 
                          Click=@(()=>AddCallTab(p2)) 
                          Text="@p2.mnu_nm"
                          Icon="" 
                          aria-label=""
                          title="@(@p2.pgm_id)"                
                        >
          
                        </RadzenPanelMenuItem>
                      </div>
                    }</div>;












    void OnPanelMenuItemClick(MenuItemEventArgs args){

      Console.WriteLine($"OnPanelMenuItemClick : {args.Text} {args.Value}");


    // args.Value에 MenuInfo가 들어있지 않으면, Text 등으로 찾아야 할 수 있음
    var menu = (MenuInfo)args.Value; // FindMenuByName(Data, args.Text);
    if (menu != null && !string.IsNullOrEmpty(menu.pgm_id))
    {
        AddCallTab(menu);
    }
}


  

  //public List<MenuDir> dirs { get; set; } = new List<MenuDir>();
  //public ResultInfo<Dictionary<string, object>>? Data { get; set; }
  public List<MenuInfo> Data { get; set; }
  //public IEnumerable<Dictionary<string, object>>? _Data2 { get; set; }


  protected async Task OnLoadMenu() {
    if (jsiniService != null) {

      
        var rdata = await DbCont<MenuInfo>("sp_dev_menu_auth", new Dictionary<string, string>() {
        { "srch_type",  "main" }
        });
        
       //Data = rdata.Data;
       Data = MenuInfo.BuildMenuTree(rdata.Data);


   
      
    }
    else {
      Console.WriteLine("JsiniService is null.");
    }StateHasChanged();
  }

  [Parameter]
    public EventCallback<MenuInfo> OnCallTab { get; set; }

    void AddCallTab(MenuInfo p)    {

      
      Console.WriteLine("sidebarmenu AddCallTab call.");

        if (OnCallTab.HasDelegate)        {
            OnCallTab.InvokeAsync(p);
        }
    }

[Parameter]
    public bool SidebarExpanded { get; set; }
    [Parameter]
    public EventCallback<bool> SidebarExpandedChanged { get; set; }






  void ShowContextMenuWithContent(MouseEventArgs args, MenuInfo item) => ContextMenuService.Open(args, ds =>
  @<RadzenMenu Click="@( ( MenuItemEventArgs ee) =>  OnMenuItemClick(ee, item))">

    <RadzenMenuItem Text=@("Open "+item.mnu_url) Value="1"></RadzenMenuItem>
    <RadzenMenuItem Text=@( item.pgm_id) Value="2"></RadzenMenuItem>


    <RadzenMenuItem Text="More items" Value="3">
      <RadzenMenuItem Text="More sub items" Value="4">
        <RadzenMenuItem Text="Item1" Value="5"></RadzenMenuItem>
        <RadzenMenuItem Text="Item2" Value="6"></RadzenMenuItem>
      </RadzenMenuItem>
    </RadzenMenuItem>
  </RadzenMenu>);

  void OnMenuItemClick(MenuItemEventArgs args, MenuInfo item) {


    Console.WriteLine($"Clicked on {args.Value}");


    if (args.Value.Equals(1)) {
      // Open URL
      string url = item.mnu_url;
      if (!string.IsNullOrEmpty(url)) {
        navigationManager.NavigateTo(url);
      }
    }
    else if (args.Value.Equals(2)) {
    var str = item.pgm_id;
     jsRuntime.InvokeVoidAsync("copyClipboard", str);
  
    }
    else if (args.Value.Equals(3)) {
      // Do something else
    }
    else if (args.Value.Equals(4)) {
      // Do something else
    }
    if (!args.Value.Equals(3) && !args.Value.Equals(4)) {
    ContextMenuService.Close();
    }
  }






}
