@inherits BaseComponent

<RadzenSidebar Responsive="false" @bind-Expanded="SidebarExpanded" class="quri_sidebarmenu" style="display: flex; flex-direction: column">
    <div style="padding: 1rem">
      <RadzenTextBox id="find" 
        Placeholder="Find page ..." 
        type="search" 
        @oninput="@FilterPanelMenu" 
        style="width: calc(100% - 25px);" 
        class="rz-search-input" aria-label="find" />
      <a class="action" style="    margin-top: 10px;" @onclick=OnLoadMenu ><i class="bi bi-arrow-clockwise"></i></a>
    </div>


    <div style="flex: 1; overflow: auto">

      <RadzenPanelMenu 
        
        Multiple=false
        Match="NavLinkMatch.Prefix">

        @if (Data != null) {

          
          @if(false){
              @foreach (var p in Data) {
            <RadzenPanelMenuItem  Text=@p.mnu_nm Icon="" Expanded=@(p.Children.Count>0) >

              @if( p.Children.Count>0 ){
                
                @foreach (var p2 in p.Children) {


                    @if( string.IsNullOrEmpty( p2.pgm_id) ){
                      <RadzenPanelMenuItem  Text=@p2.mnu_nm Icon="" Expanded=@(@p2.Children.Count>0) >
                      </RadzenPanelMenuItem>
                    }
                    else{
                      <div @oncontextmenu="(e => ShowContextMenuWithContent(e, p2))"  @oncontextmenu:preventDefault="true"   >
                        <RadzenPanelMenuItem 
                          Click=@(()=>AddCallTab(p2)) 
                          Text="@p2.mnu_nm"
                          Icon="" 
                          aria-label=""
                          title="@(@p2.pgm_id)"                
                        >
          
                        </RadzenPanelMenuItem>
                      </div>
                    }
                                     
            
                }

              }
            </RadzenPanelMenuItem>

            }
            }


             @foreach (var menu in Data)                {
                    @RenderMenuMarkup(menu)
                }
          


        }

      </RadzenPanelMenu>

    </div>
  </RadzenSidebar>
  
@code {

    protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      //await OnLoadMenu();
    }

  }

  void FilterPanelMenu(ChangeEventArgs args) {
    var term = args.Value??string.Empty;
    if (string.IsNullOrEmpty(term?.ToString())) {
      Data = Data2;
    }
    else{
    /*
    else { 
      dirs.ForEach(menuDir => {
      if(  !menuDir.first_memory ){
    menuDir.pre_expend = menuDir.expend; // 값 복사
          menuDir.first_memory = true;
      }
    menuDir.expend = true; // 새로운 값 설정
}); 
*/


      Data = FilterMenuTree(Data2, term?.ToString()).ToList();
    }
/*
 * 
      Data = Data2?.Where(x => 
        x.mnu_nm.Contains(term.ToString(), StringComparison.OrdinalIgnoreCase)
        || string.IsNullOrEmpty(x.pgm_id  )
      ).ToList()   ;

      foreach( var d in Data){
        d.Expanded = true;
      }
*/
      
    //}
    StateHasChanged();
  }



private IEnumerable<MenuInfo> FilterMenuTree(IEnumerable<MenuInfo> menus, string term) {
    foreach (var menu in menus) {
        // 현재 메뉴가 조건에 맞는지 확인
        var matches = menu.mnu_nm.Contains(term, StringComparison.OrdinalIgnoreCase) || string.IsNullOrEmpty(menu.pgm_id);

        // 하위 메뉴를 재귀적으로 필터링
        var filteredChildren = FilterMenuTree(menu.Children, term).ToList();

        // 조건에 맞거나 하위 메뉴 중 조건에 맞는 항목이 있을 경우 결과에 포함
        if (matches || filteredChildren.Any()) {
            yield return new MenuInfo {
                mnu_nm = menu.mnu_nm,
                pgm_id = menu.pgm_id,
                Children = filteredChildren,
                Expanded = true // 검색 결과를 펼치기 위해 설정
            };
        }
    }
} 



RenderFragment RenderMenuMarkup(MenuInfo p2) => 
  @<div>@if( string.IsNullOrEmpty( p2.pgm_id) ){
    <RadzenPanelMenuItem  
    Text=@p2.mnu_nm 
    Icon="" 

    @bind-Expanded=@p2.Expanded 
    class="@((@p2.Children.Count>0)?"menu-fold":"")" >
      @if (p2.Children != null && p2.Children.Count > 0)        {
        @foreach (var child in p2.Children)            {
          @RenderMenuMarkup(child)
        }
      }
    </RadzenPanelMenuItem>
  }
  else{
    <div @oncontextmenu="(e => ShowContextMenuWithContent(e, p2))"  @oncontextmenu:preventDefault="true"   >
      <RadzenPanelMenuItem 
        Click=@(()=>AddCallTab(p2)) 
        Text="@p2.mnu_nm"
        Icon="" 
        aria-label=""
        title="@(@p2.pgm_id)"                
      >
          
      </RadzenPanelMenuItem>
    </div>
  }</div>;

public List<MenuInfo> Data { get; set; } = new List<MenuInfo>();
public List<MenuInfo> Data2 { get; set; } = new List<MenuInfo>();

void OnMenuExpand(MenuInfo menu){
  return;
    // menu의 모든 상위 메뉴의 mnu_id를 HashSet에 저장
    var parentIds = new HashSet<string>();
    var current = menu;
    while (current != null)    {
        parentIds.Add(current.mnu_id);
        current = current.OwnerMenu;
    }

    // 최상위 메뉴(Data) 중에서, menu와 그 부모가 아닌 것만 Expanded = false
    foreach (var root in Data2)    {
        if (!parentIds.Contains(root.mnu_id))        {
            root.Expanded = false;
        }
    }
    StateHasChanged();
}


public async Task OnLoadMenu() {
  if (jsiniService != null) {
      
      var rdata = await DbCont<MenuInfo>("sp_dev_menu_auth", new Dictionary<string, string>() {
        { "srch_type",  "main" }
      }, false, true);
        
      if( rdata != null ){
        Data2 = MenuInfo.BuildMenuTree(rdata.Data);
        Data = Data2;
        //Data = Data2;
      }
   
  }
  else {
    Console.WriteLine("JsiniService is null.");
  }
  StateHasChanged();
}

[Parameter] public EventCallback<(MenuInfo, bool)> OnCallTab { get; set; }

void AddCallTab(MenuInfo p)    {
      
  AddCallTab(p, false);
}
    
void AddCallTab(MenuInfo p, bool isOtherTab)    {
      
  Console.WriteLine("sidebarmenu AddCallTab call.");

    if (OnCallTab.HasDelegate)        {
        OnCallTab.InvokeAsync((p, isOtherTab));
    }
}

[Parameter]    public bool SidebarExpanded { get; set; }
[Parameter]    public EventCallback<bool> SidebarExpandedChanged { get; set; }

  void ShowContextMenuWithContent(MouseEventArgs args, MenuInfo item) => ContextMenuService.Open(args, ds =>
  @<RadzenMenu Click="@( ( MenuItemEventArgs ee) =>  OnMenuItemClick(ee, item))">

    <RadzenMenuItem Text=@("Open "+item.mnu_url) Value="1"></RadzenMenuItem>
    <RadzenMenuItem Text=@( item.pgm_id) Value="2"></RadzenMenuItem>
    <RadzenMenuItem Text="OtherTab" Value="5"></RadzenMenuItem>


    <RadzenMenuItem Text="More items" Value="3">
      <RadzenMenuItem Text="More sub items" Value="4">
        <RadzenMenuItem Text="Item2" Value="6"></RadzenMenuItem>
      </RadzenMenuItem>
    </RadzenMenuItem>
  </RadzenMenu>);

  void OnMenuItemClick(MenuItemEventArgs args, MenuInfo item) {

    Console.WriteLine($"Clicked on {args.Value}");

    if (args.Value.Equals(1)) {
      // Open URL
      string url = item.mnu_url;
      if (!string.IsNullOrEmpty(url)) {
        navigationManager.NavigateTo(url);
      }
    }
    else if (args.Value.Equals(2)) {
    var str = item.pgm_id;
     jsRuntime.InvokeVoidAsync("copyClipboard", str);
  
    }
    else if (args.Value.Equals(3)) {
      // Do something else
    }
    else if (args.Value.Equals(4)) {
      // Do something else
    }
    else if (args.Value.Equals(5)) {
      AddCallTab(item, true);
    }
    if (!args.Value.Equals(3) && !args.Value.Equals(4)) {
    ContextMenuService.Close();
    }
  }

}