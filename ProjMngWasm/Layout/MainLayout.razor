@using Radzen
@using Newtonsoft.Json
@using Radzen.Blazor
@using static ProjMngWasm.Layout.MainCont
@inherits LayoutComponentBase
@inject ThemeService themeService
@inject QueryStringThemeService QueryStringThemeService
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject TooltipService TooltipService
@inject DialogService DialogService

@inject JsiniService? jsiniService
@inject NavigationManager? NavigationManager

@inject ContextMenuService ContextMenuService

<HeadContent>
  <RadzenTheme Theme="software-dark" />

  
  <link rel="stylesheet" href="css/site2.css" />

</HeadContent>

<PageTitle> Jsini | @appData.User?.Last_page_nm </PageTitle>
<RadzenComponents />

<RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-config-sidebar'">
  



  <RadzenHeader>
    <ChildContent>
      <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0px">
        <RadzenColumn Size="5">
          <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <a href="/"><span style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">Project Managerment</span></a>
            <a href="@appData.User?.UserServerUrl" target="_blank"> - @appData.ActiveServerUrl (  @appData.User?.UserServerUrl ) </a>
          </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="7">



          <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <UserProfile OnSettingClickCallback="@(args => HandleSettingClick(args.title, args.path))" />

            <RadzenSidebarToggle Icon="lightbulb" Click="@(() => configSidebarExpanded = !configSidebarExpanded)" class="rz-m-0" />
          </RadzenStack>
        </RadzenColumn>
      </RadzenRow>
    </ChildContent>
  </RadzenHeader>

  <RadzenBody >
    <ChildContent>
      <RadzenContentContainer Name="main">
              
            <!-- main content-->
            <RadzenRow class="rz-mx-auto main-body-context rz-h-100 " theme="@appData.User?.Theme" Style="">
                            
              <RadzenColumn Size="12" class=" qurimaincont rz-h-100" Style=@("display:"+(IsBodyUrl?"block":"none")+";")
              >        
                
                <CascadingValue Value="projItems">
                  <MainCont @ref="_main" OnChanged="OnMainContChanged" />
                </CascadingValue>
              </RadzenColumn>

              <RadzenColumn Size="12" class=" quriUrlcont" Visible=IsBodyUrl2>
                @Body
              </RadzenColumn>

            </RadzenRow>


      </RadzenContentContainer>
    </ChildContent>
  </RadzenBody>

  <SideBarMenu  @ref="sideBarMenuRef" OnCallTab="AddCallTab" @bind-SidebarExpanded="sidebarExpanded" />

  <RadzenSidebar Responsive="false" @bind-Expanded="@configSidebarExpanded" class="rz-sidebar-second" Style="--rz-sidebar-width: 370px; grid-area: rz-config-sidebar; background-color: var(--rz-body-background-color); color: var(--rz-text-color);">
    <RadzenStack class="rz-p-4" Gap="0">
      <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H2" class="rz-m-0">Alert</RadzenText>
        <RadzenButton Icon="close" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Click="@(() => configSidebarExpanded = false)" />
      </RadzenStack>
    </RadzenStack>
  </RadzenSidebar>


</RadzenLayout>

@if (!rendered) {
  <div class="rz-app-loading">
    <div class="logo-loading"></div>
  </div>
}

@code {

  [Inject] protected IJSRuntime? jsRuntime { get; set; }

  RadzenButton? wcagColorsInfo;
  RadzenButton? freeThemesInfo;
  bool sidebarExpanded = true;
  bool configSidebarExpanded = false;
  bool rendered;


  private SideBarMenu? sideBarMenuRef;

    // private void HandleLoginSuccess()
    // {
    //     로그인 성공 후 메뉴 갱신
    //     sideBarMenuRef?.OnLoadMenu();
    // }



  void OnMainContChanged()    {
    Console.WriteLine($"event OnMainContChanged 언제 일어 나나??");
    StateHasChanged();
  }


  protected override void OnInitialized() {
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("ko");
  }



  bool IsBodyUrl{get;set;} = false;
  bool IsBodyUrl2{get;set;} = false;

  void BodyVisible(){    

    // Console.WriteLine($"BodyVisible00000000000000000000000: {_relativeUrl}   { _main == null}      { _main?.PageCount} ");

    if( !IsBodyUrl && _main != null && _main?.PageCount > 0){
      IsBodyUrl = true;
      StateHasChanged();
    }
    else if( IsBodyUrl  && ( _main == null || _main?.PageCount <= 0 ) ){
      IsBodyUrl = false;
      StateHasChanged();
    }
  }


  void BodyVisible2(){    

    // Console.WriteLine($"BodyVisible: {_relativeUrl}");

    if( _relativeUrl.Length > 0 ){        
      IsBodyUrl2 = true;
    }
    else{         
      IsBodyUrl2 = false;
    }
    // Console.WriteLine($"IsBodyUrl: {IsBodyUrl}         {IsBodyUrl2} ");
    StateHasChanged();
  }


  string _relativeUrl {get;set;} = "";
  string relativeUrl {
    get{return _relativeUrl;}
    set{ 
      if( _relativeUrl != value){
        _relativeUrl = value;
        BodyVisible2();
      }
    }
  }



  protected override async Task OnAfterRenderAsync(bool firstRender) {

    if (firstRender) {
      rendered = true;
    }
    var currentUrl = UriHelper.Uri;
    var baseUri = UriHelper.BaseUri;


    Console.WriteLine($"currentUrl: {currentUrl}    baseUri     {baseUri} ");
    if (currentUrl.IndexOf("?theme=") >= 0) {
      Console.WriteLine($"Move to root");
      NavigationManager.NavigateTo("/");
      return;
    }
    var calcUrl = currentUrl.Replace(baseUri, string.Empty);

    if( calcUrl.StartsWith('?')){
      relativeUrl = calcUrl.Substring(0, calcUrl.IndexOf('?'));
    }
    else{
      relativeUrl = calcUrl;
    }

    // Console.WriteLine($"OnAfterRenderAsync Call: {IsBodyUrl}         {IsBodyUrl2} ");
    BodyVisible();
    return;
    // Console.WriteLine($"Relative URL: {relativeUrl}");

    // Console.WriteLine($"Current URL: {currentUrl}");
    // Console.WriteLine($"_openPageUrl URL: {_openPageUrl}");

    //projItems


    // if( projItems.Count <= 0){
    // IsBodyUrl = false;
    // }

    if( projItems.Count <= 0){
      IsBodyUrl = false;
    }
    else {
      IsBodyUrl = true;
    }


    if ((_openPageUrl != relativeUrl) && !string.IsNullOrEmpty(relativeUrl) && !relativeUrl.StartsWith('?')) {
      _openPageUrl = relativeUrl;


      IsBodyUrl2 = true;
      // if( projItems.Count <= 0){
      // IsBodyUrl = false;
      // }
      // else {
      // IsBodyUrl = true;
      // }

      // Console.WriteLine($"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: {IsBodyUrl}");


      StateHasChanged();
    }

    if ( !IsBodyUrl && (_openPageUrl != relativeUrl)  ) {
      _openPageUrl = relativeUrl;
      IsBodyUrl = true;
      IsBodyUrl2 = false;
      // Console.WriteLine($"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: {IsBodyUrl}");
      StateHasChanged();
    }
    // Console.WriteLine($"IsBodyUrl : {IsBodyUrl}      {IsBodyUrl2}");
    //StateHasChanged();

  }

  string _openPageUrl = null;

  public List<ProgramInfo> projItems = new List<ProgramInfo>();// { "Customers", "Orders", "Order Details" };

  MainCont? _main{get;set;}



  // [Inject] AppProjData appData { get; set; }
  [Inject] AppData appData { get; set; }


  protected override async Task OnInitializedAsync() {
    bool isLogin = await AuthCheck();
    if (!isLogin) {
      NavigationManager.NavigateTo("/login");
    }
    else{

      sideBarMenuRef?.OnLoadMenu();


      // 로그인 성공시 SideBarMenu 의 OnLoadMenu 를 호출 하고 싶다.
      Console.WriteLine($"첫 번째 로드 : {appData.User}");
      if( appData.User != null && appData.User.Last_page_yn == true && !string.IsNullOrEmpty(appData.User?.Last_page) ){
        Console.WriteLine($"첫 화면 열어 주기 : {appData.User.Last_page}");
       await _main.AddItem( appData.User.Last_page, appData.User.Last_page_nm, appData.User.Last_page_nm, appData.User.Last_page_nm, appData.User.Last_page_nm, false, false   );
      }
    }
    //StateHasChanged();
  }



  public async Task<bool> AuthCheck() {

    // 인증체크
    if (appData.User == null) {

      Console.WriteLine($"LoadInfo AuthCheck start: ");

      await LoadInfo();
      
      Console.WriteLine($"LoadInfo AuthCheck LoadInfo: {appData.User}");

      // try {
      //     string json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userInfo");
      //     if (!string.IsNullOrEmpty(json)) {
      //         Member user = JsonConvert.DeserializeObject<Member>(json);
      //         appData.User = user;
      //     }
      // }
      // catch (Exception eee) {
      // }

      return (appData.User != null);
    }
    else {
      await LoadInfo();
      return true;
      // 인증된 사용자
      // appData.User = user;
      // appData.IsLogin = true;
    }


  }

  // 로컬저장소에 보관된 인증 정보
  protected async Task LoadInfo() {
    Console.WriteLine($"LoadInfo start: ");
    try {
      string json = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "userInfo");
      if (!string.IsNullOrEmpty(json)) {
        Console.WriteLine($"LoadInfo try : {json}");
        Member user = JsonConvert.DeserializeObject<Member>(json);
        appData.User = user;
        appData.SelectedFontValue = user.FontSize??"12";
        
    //Console.WriteLine($"LoadInfo themeService  : {user.Theme} ");



        themeService.SetTheme(user?.Theme ?? "software-dark");
        //sysTheme = appData.User.Theme ?? "software-dark";
      }
    }
    catch (Exception eee) {
      Console.WriteLine($"Error loading user info: {eee.Message}");
    }
  }
  

  public void AddCallTab((MenuInfo p, bool isOtherTab) args) {
    if( appData.User?.SideBarAutoClose == true ){
      sidebarExpanded = false;
    }
    _main.AddItem(args.p, args.isOtherTab);    
  }
  
  void HandleSettingClick(string title, string path)    {        
    _main.AddItem(path,title,title,title,title, false, false);
  }



}


@if (!string.IsNullOrWhiteSpace( @appData.SelectedFontValue)) {
<style>
:root {
  --rz-root-font-size: @(@appData.SelectedFontValue)px !important;
}
</style>
}