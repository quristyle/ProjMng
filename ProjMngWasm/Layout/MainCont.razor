@inherits BaseComponent

@if (ready) {
    <RadzenTabs @bind-SelectedIndex="@selectedIndex" class="rz-h-100" RenderMode="TabRenderMode.Client" @ref="@ProjTabs">
        <Tabs>
      @if ( ProjItems != null && ProjItems?.Count > 0 ) {
      @foreach (var item in ProjItems) {

          <RadzenTabsItem Text="@(item.ProjName)" title="@(WasmUtil.ExtractLastSegment( item.ProjPath ) +" - "+  item.Url)"
                            >
              <Template>


                <span class="rz-tabview-title" @oncontextmenu=@(args => ShowContextMenuWithContent(args, item)) @oncontextmenu:preventDefault="true">@(item.ProjName)</span>

                <span class="float-end" style="margin-left: 10px;margin-top: 1px;" @onclick=RemoveItem><i class="bi bi-x-circle-fill"></i></span>

              </Template>
              <ChildContent >
                <div class="main-page-context">

                @if (item.ComponentType is not null) {
                  <DynamicComponent Type="item.ComponentType" />
                }
                else {
                  <p>1 @item.ProjName </p>
                  <p>2 @item.ProjId </p>
                  <p>3 @item.ProjPath </p>
                  <p>4 @item.ComponentType </p>
                  <p>5 컴포넌트를 찾을 수 없습니다.</p>
                }


                </div>
              </ChildContent >


          </RadzenTabsItem>
        }
      }
        </Tabs>
    </RadzenTabs>
}
@code {
   RadzenTabs? ProjTabs{get;set;} 

  private List<ProgramInfo> _projItems = new List<ProgramInfo>();
  [CascadingParameter]
  public List<ProgramInfo> ProjItems {
    get => _projItems;
    set {
      if (_projItems != value) {
        _projItems = value;
        //selectedIndex = _projItems.Count - 1;

        // ProjTabs?.Reload();
        // StateHasChanged();
        // ProjTabs?.Reload();
      }
    }
  }

  public int PageCount{get{
    return _projItems.Count;}
  }



    bool ready;
    protected override async Task OnAfterRenderAsync(bool firstRender)    {
        if (firstRender)        {
            ready = true;
            await InvokeAsync(StateHasChanged);

      //_projItems.Add(new ProgramInfo("ProjMngWasm.Pages.Proj.ProjDb", "ProjMngWasm") { ProjId = "ProjDb", ProjPath = "ProjDb" });
     
      //selectedIndex = _projItems.Count -1;

      //ProjTabs?.Reload();
      //StateHasChanged();

    }
  }

  int selectedIndex = 0;

  public void AddItem(string fullname, string title, string name, string url, string dir) {

    bool isExsit = false;
    for(int i = 0; i < _projItems.Count; i++){

      if( _projItems[i].ProjPath == fullname ){
        selectedIndex = i;
        isExsit = true;
        break;
      }

    }

    if ( !isExsit ){
      ProgramInfo ppp = new ProgramInfo(fullname, fullname) {
          ProjName = title,
          ProjId = name,
          Url=url,
          ProjPath = fullname
        };

      _projItems.Add(ppp);
      selectedIndex = _projItems.Count - 1;

    }
    //ProjTabs?.Reload();

  }



  public void RemoveItem() {
    _projItems.RemoveAt(selectedIndex);
    if (selectedIndex >= _projItems.Count) selectedIndex = _projItems.Count - 1;
    ProjTabs.Reload();
  }





  void ShowContextMenuWithContent(MouseEventArgs args, ProgramInfo item) => ContextMenuService.Open(args, ds =>
  @<RadzenMenu Click="@( ee =>  OnMenuItemClick(ee, item))">
    <RadzenMenuItem Text="Open Url" Value="1"></RadzenMenuItem>
    <RadzenMenuItem Text="Close Url Page" Value="99"></RadzenMenuItem>
    <RadzenMenuItem Text="More items" Value="3">
      <RadzenMenuItem Text="More sub items" Value="4">
        <RadzenMenuItem Text="Item1" Value="5"></RadzenMenuItem>
        <RadzenMenuItem Text="Item2" Value="6"></RadzenMenuItem>
      </RadzenMenuItem>
    </RadzenMenuItem>
  </RadzenMenu>);

  void OnMenuItemClick(MenuItemEventArgs args, ProgramInfo item) {


    Console.WriteLine($"Clicked on {args.Value}");


    if (args.Value.Equals(1)) {
      // Open URL
      string url = item.Url;
      if (!string.IsNullOrEmpty(url)) {
        navigationManager.NavigateTo(url);
      }
    }
    else if (args.Value.Equals(99)) {
      navigationManager.NavigateTo("/");
    }
    else if (args.Value.Equals(3)) {
      // Do something else
    }
    else if (args.Value.Equals(4)) {
      // Do something else
    }
    if (!args.Value.Equals(3) && !args.Value.Equals(4)) {
      ContextMenuService.Close();
    }
  }




}

<style>
  ul[role=tablist] {
    flex-wrap: wrap;
  }
</style>