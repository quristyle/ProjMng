@inherits BaseComponent

@if (ready) {

  @* @bind-SelectedIndex="@selectedIndex" *@

    <RadzenTabs SelectedIndex="@selectedIndex" class="rz-h-100" RenderMode="TabRenderMode.Client" @ref="@ProjTabs" SelectedIndexChanged=OnSelectedChange  >
        <Tabs>
      @if ( ProjItems != null && ProjItems?.Count > 0 ) {
      @foreach (var item in ProjItems) {

          <RadzenTabsItem Text="@(item.ProjName)" title="@(WasmUtil.ExtractLastSegment( item.ProjPath ) +" - "+  item.Url)"
                            >
              <Template>


                <span class="rz-tabview-title" @oncontextmenu=@(args => ShowContextMenuWithContent(args, item)) @oncontextmenu:preventDefault="true">@(item.ProjName)</span>

                <span class="float-end" style="margin-left: 10px;margin-top: 1px;" @onclick=RemoveItem><i class="bi bi-x-circle-fill"></i></span>

              </Template>
              <ChildContent >
                <div class="main-page-context">

                @if (item.ComponentType is not null) {
                  <DynamicComponent Type="item.ComponentType" 
                  
                  
                  
                   Parameters="@(new Dictionary<string, object>
                              {
                                  ["OnRequestRemove"] = (Action)RemoveItem
, 
                                  ["OnRequestStateHasChange"] = (Action)ParentStateHasChange


                              })"
                  
                  
                  
                  />
                }
                else {
                  <p>1 @item.ProjName </p>
                  <p>2 @item.ProjId </p>
                  <p>3 @item.ProjPath </p>
                  <p>4 @item.ComponentType </p>
                  <p>5 컴포넌트를 찾을 수 없습니다.</p>
                }


                </div>
              </ChildContent >


          </RadzenTabsItem>
        }
      }
        </Tabs>
    </RadzenTabs>
}
@code {
   RadzenTabs? ProjTabs{get;set;} 

   [Parameter] public EventCallback OnChanged { get; set; }

  // private List<ProgramInfo> _projItems = new List<ProgramInfo>();
  // [CascadingParameter]
  // public List<ProgramInfo> ProjItems {
  //   get => _projItems;
  //   set {
  //     if (_projItems != value) {
  //       _projItems = value;
  //     }
  //   }
  // }

  [CascadingParameter] public List<ProgramInfo> ProjItems{get;set;}

  public int PageCount{get{
    return ProjItems.Count;}
  }



    bool ready;
    protected override async Task OnAfterRenderAsync(bool firstRender)    {
        if (firstRender)        {
            ready = true;
            await InvokeAsync(StateHasChanged);

      //_projItems.Add(new ProgramInfo("ProjMngWasm.Pages.Proj.ProjDb", "ProjMngWasm") { ProjId = "ProjDb", ProjPath = "ProjDb" });
     
      //selectedIndex = _projItems.Count -1;

      //ProjTabs?.Reload();
      //StateHasChanged();

    }
  }

  int selectedIndex = 0;

  public async Task AddItem(string fullname, string title, string name, string url, string dir , bool isOtherTab, bool isSave) {

    bool isExsit = false;
    if( !isOtherTab ){
      for(int i = 0; i < ProjItems.Count; i++){

        if( ProjItems[i].ProjPath == fullname ){
          selectedIndex = i;
            //appData.ActiveDocument = "Jsini | "+title;
          isExsit = true;
          break;
        }

      }
    }

    if ( !isExsit ){
      //appData.ActiveDocument = "Jsini | "+title;
      ProgramInfo ppp = new ProgramInfo(fullname, fullname) {
          ProjName = title,
          ProjId = name,
          Url=url,
          ProjPath = fullname
        };

      ProjItems.Add(ppp);
      selectedIndex = ProjItems.Count - 1;

    }

    if( isSave ){   
      appData.User.Last_page = fullname;
      appData.User.Last_page_nm = title;
      await SaveUserInfo();
    }

    //ProjTabs?.Reload();

  }

  
  public async Task AddItem(MenuInfo p, bool isOtherTab=false, bool isSave = true) {
    await AddItem(p.pgm_id, p.mnu_nm, p.mnu_nm, p.mnu_url, "", isOtherTab, isSave);
  }


  public async void RemoveItem() {
    ProjItems.RemoveAt(selectedIndex);
    if (selectedIndex >= ProjItems.Count) selectedIndex = ProjItems.Count - 1;
    ProjTabs.Reload();
    await OnChanged.InvokeAsync();
    StateHasChanged();
  }

  
  public async void AllRemoveItem() {

    ProjItems.Clear();
    selectedIndex = -1;
    ProjTabs.Reload();
    await OnChanged.InvokeAsync();
    StateHasChanged();
  }

  
  
  public async void OthersRemoveItem() {
    if (ProjItems == null || ProjItems.Count == 0 || selectedIndex < 0 || selectedIndex >= ProjItems.Count)
        return;

    var selectedItem = ProjItems[selectedIndex];
    ProjItems.Clear();
    ProjItems.Add(selectedItem);
    selectedIndex = 0;

    ProjTabs.Reload();
    await OnChanged.InvokeAsync();
    StateHasChanged();
  }
  
  public async void ParentStateHasChange() {
    await OnChanged.InvokeAsync();
    StateHasChanged();
  }




  void ShowContextMenuWithContent(MouseEventArgs args, ProgramInfo item) => ContextMenuService.Open(args, ds =>
  @<RadzenMenu Click="@( ee =>  OnMenuItemClick(ee, item))">
    <RadzenMenuItem Text="Open Url" Value="1"></RadzenMenuItem>
    <RadzenMenuItem Text="MoveRoot" Value="99"></RadzenMenuItem>
    <RadzenMenuItem Text="OtherTabOpen" Value="80"></RadzenMenuItem>
    <RadzenMenuItem Text="More items" Value="3">
      <RadzenMenuItem Text="More sub items" Value="4">
        <RadzenMenuItem Text="Item1" Value="5"></RadzenMenuItem>
        <RadzenMenuItem Text="Item2" Value="6"></RadzenMenuItem>
      </RadzenMenuItem>
    </RadzenMenuItem>
    <RadzenMenuItem Text="Close" Value="100"></RadzenMenuItem>
    <RadzenMenuItem Text="Others Tab Close" Value="98"></RadzenMenuItem>
    <RadzenMenuItem Text="All Close" Value="97"></RadzenMenuItem>
  </RadzenMenu>
  );

  void OnMenuItemClick(MenuItemEventArgs args, ProgramInfo item) {


    Console.WriteLine($"Clicked on {item}");

    switch( args.Value.ToString()){
      case "1" : if (!string.IsNullOrEmpty(item.Url)) { navigationManager.NavigateTo(item.Url); } break;
      case "80" : AddItem( item.ProjPath , item.ProjName , item.ProjName, item.Url, "", true, true); break;
      case "97" : AllRemoveItem(); break;
      case "98" : OthersRemoveItem(); break;
      case "99" : navigationManager.NavigateTo("/"); break;
      case "100" : RemoveItem(); break;
    }


    if (!args.Value.Equals(3) && !args.Value.Equals(4)) {
      ContextMenuService.Close();
    }
  }



  private async Task OnSelectedChange(int args)  {
    //throw new NotImplementedException();

    Console.WriteLine($"OnSelectedChange : {args}");

    selectedIndex = args;

    ProgramInfo p = ProjItems[selectedIndex];

   
    appData.User.Last_page = p.ProjPath;
    appData.User.Last_page_nm = p.ProjName;
    
    await OnChanged.InvokeAsync();

    SaveUserInfo();

  }
}

<style>
  ul[role=tablist] {
    flex-wrap: wrap;
  }
</style>