@{
  /* description : 다이어 그램 편집기
  * title : diagram
  * sort : 0
  * credt : 2025-04-13
  * author : quristyle
  */
}

@inject IJSRuntime JS
@using System.Diagnostics.CodeAnalysis
@using System.Text.Json

@inherits BaseComponent

<div class="diagramMain" style="height:100%;">
    
<div class="toolbar" style="font-size:1.2rem;width: 24px; float: left; height: 100%;">
  <a @onclick="AddEntity" title="add"><i class="bi bi-plus-square"></i></a>
  <a @onclick="RemoveSelected" title="선택된 엔터티 삭제"><i class="bi bi-x-square"></i></a>
  <a @onclick="AutoLayout" title="자동 정렬"><i class="bi bi-filter-square"></i></a>

@*   
  <button @onclick="SaveDiagram">xml 저장</button>
  <button @onclick="LoadDiagram">xml 불러오기</button>

  <button @onclick="SaveAsObjectJson">객체형 JSON 저장</button>
  <button @onclick="LoadFromObjectJson">객체형 JSON 불러오기</button> 
*@

</div>
<div  style="float:left;height:100%;width:calc(100% - 25px);overflow:auto;">
  <div id="@ContainerId" tabindex="0"></div>
</div>

</div>




@code {

  private DotNetObjectReference<QuriDiagram>? _dotNetRef;
  private string ContainerId = $"graph-container-{Guid.NewGuid()}";
  private string _copyPasteId = $"graph-copypaste-{Guid.NewGuid()}";

  private string _selectedNode = "없음"; //선택한 노드
  private string SelectERD = "";

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      _dotNetRef = DotNetObjectReference.Create(this);
      await JS.InvokeVoidAsync("mxGraphInit", ContainerId, _dotNetRef);
    }
  }

  private string _diagramXml = "";

  private async Task AddEntity() =>    await JS.InvokeVoidAsync("addEntityNode", ContainerId);

  public async Task<string> SaveDiagram() { _diagramXml = await JS.InvokeAsync<string>("saveDiagramXml", ContainerId); return _diagramXml; }

    private async Task LoadDiagram() => await JS.InvokeVoidAsync("loadDiagramXml", _diagramXml);

    private async Task AutoLayout() => await JS.InvokeVoidAsync("autoLayout", ContainerId);

  public async Task<string> SaveAsObjectJson() { _diagramXml = await JS.InvokeAsync<string>("saveDiagramAsObjectJson", ContainerId); return _diagramXml; }
  
  private async Task LoadFromObjectJson() => await JS.InvokeVoidAsync("loadDiagramFromObjectJson", ContainerId, _diagramXml);
    private async Task RemoveSelected() =>  await JS.InvokeVoidAsync("removeSelectedEntity", ContainerId);




  public async Task LoadDiagramFromObjectJson(string db_pvalue) {
    await JS.InvokeVoidAsync("loadDiagramFromObjectJson", ContainerId,  db_pvalue);
  }




  [JSInvokable]
  public Task OnNodeClicked(string label) {
    _selectedNode = label;
    StateHasChanged(); // UI 갱신
    return Task.CompletedTask;
  }

  public async ValueTask DisposeAsync() {
    _dotNetRef?.Dispose();
  }

}
