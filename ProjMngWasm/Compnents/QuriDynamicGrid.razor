@inherits QuriDynamicGridBase


@if (ReqData != null){

  <RadzenDataGrid 
    Data="@orders"
    @ref="ordersGrid" 
    ColumnWidth="100px"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    @bind-Value="@SItems"
    GridLines="Radzen.DataGridGridLines.Vertical"
    RowUpdate="@OnUpdateRow"
    RowCreate="@OnCreateRow"
    RowDoubleClick="@OnDoubleClick"
    RowSelect="@OnRowClick"
    LogicalFilterOperator="LogicalFilterOperator.And"
    AllowFiltering=@IsToggle
    AllowColumnResize="true"
    FilterMode="FilterMode.Simple"
    SelectionMode="DataGridSelectionMode.Single"
    AllowSorting="true"
    Count=@RecordCount
    AllowPaging=@AllowPaging
    PageSize=@PageSize


    class="@quriGrdHash"
    
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary=@AllowPaging
                        PagerAlwaysVisible=@AllowPaging
                        PagerPosition=PagerPosition.Bottom











    Style="width:100%;height:100%;"
    IsLoading="@IsLoading"
    TItem="IDictionary<string, object>"
      >

      @* 

      
    AllowAlternatingRows="false"


                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        PagerAlwaysVisible=true
                        AllowPaging="true"
                        PageSize=5000
                        AllowPaging="true"
                        PagerPosition=PagerPosition.Bottom


      *@



    <EmptyTemplate>
      <p style="color: lightgrey; font-size: 18px; text-align: center; margin: 2rem;">No records</p>
    </EmptyTemplate>
  <Columns>

      @if (cols != null && cols.Count > 0 && (IsSave || IsAction || IsDelete)) {
        <RadzenDataGridColumn Context="IDictionary<string, object>"
                              Filterable=false
                              Sortable="false"
                              TextAlign="TextAlign.Center"
                              Frozen="true"
                              FrozenPosition="FrozenColumnPosition.Left"
                              Width=@ActionWidth() MinWidth=@ActionWidth() MaxWidth=100 >
          <Template Context="order">

            @if (IsSave) {
              <a class="action" @onclick="@(args => EditRow(order))"><i class="bi bi-pencil"></i></a>
            }
            @if (IsAction) {
              @* <RadzenButton Icon="assignment_return" Size="ButtonSize.ExtraSmall" Click="@(args => ActionRow(order))" @onclick:stopPropagation="true" /> *@
              <a class="action" @onclick="@(args => ActionRow(order))"><i class="bi bi-check-square"></i></a>
            }
            @if (IsDelete) {
              <a class="action float-end" @onclick="@(args => ConfDeleteRow(order))"><i class="bi bi-dash-square"></i></a>
            }

          </Template>
          <EditTemplate Context="order">

            @if (IsSave) {
              <a class="action" @onclick="@(args => SaveRow(order))"><i class="bi bi-save2"></i></a>
              <a class="action" @onclick="@(args => CancelEdit(order))"><i class="bi bi-x-square"></i></a>
            }
            @if (IsAction) {
              <a class="action" @onclick="@(args => ActionRow(order))"><i class="bi bi-action"></i></a>
            }
            @* @if (IsDelete) { *@
            @*   <a class="action float-end" @onclick="@(args => ConfDeleteRow(order))"><i class="bi bi-dash-square"></i></a> *@
            @* } *@

          </EditTemplate>
        </RadzenDataGridColumn>
      }
      
      @* adsfasd 

      
                Type=@WasmUtil.GetType(col.Value)
                Property="@PropertyAccess.GetDynamicPropertyExpression( col.Key, WasmUtil.GetType(col.Value) )"


      *@


      @{
        @if (cols != null) {
          @foreach (var col in cols)        {

            if (isHiddenCol(col.Key)){ continue; }

              
            <RadzenDataGridColumn 
              @key=@col.Key
              Width="@GetWidth(col.Value)"
              TextAlign="TextAlign.Center"
              Title="@col.Key"                               
              Type=@WasmUtil.GetType(col.Value)
              Property="@PropertyAccess.GetDynamicPropertyExpression( col.Key, WasmUtil.GetType(col.Value) )"
            >

              <EditTemplate Context="order">
                @{

                  if (col.Value == "System.DateTime") {

                    <RadzenDatePicker  DateFormat="yyyy-MM-dd"             
                      TValue="DateTime?" 
                      Value="@(order[col.Key] as DateTime?)" 
                      ValueChanged="@(v => order[col.Key] = v)" 
            
                    />
                  } 
                  else if (col.Value == "System.Int32") {
                    
                  //Console.WriteLine($"col.Key : {col.Key} , col.Value : {col.Value} , order[col.Key] : {order[col.Key]}, GetType : {order[col.Key].GetType()} ");
                    if (order[col.Key]?.GetType().ToString() == "System.Int64") {
                      <RadzenNumeric TValue="long?" 
                      Value="@(order[col.Key] as long?)" 
                      ValueChanged="@(v => order[col.Key] = v)" 
                      />
                    }
                    else{
                      <RadzenNumeric TValue="int?" 
                      Value="@(order[col.Key] as int?)" 
                      ValueChanged="@(v => order[col.Key] = v)" 
                      />
                    }
                  }
                  else if (col.Value == "System.Boolean") {
                    <RadzenCheckBox @bind-Value=@order[col.Key] />
                  }
                  else {

                    //                             ValueChanged="@(v => order[col.Key] = ((CommonCode)v).Code)"
                    
                    string codesss = DropDownColCode(@col.Key);
                    if( !string.IsNullOrEmpty( codesss ) ){
              
                          <QuriDropDown TValue="@CommonCode" CodeId=@codesss 
                            InitialCode=@order[col.Key].ToString()
                            
              Value="dropDownValues[col.Key]"
              ValueChanged="@(v => OnDropDownChanged(col.Key, order, v))"

                            />
              
        
                    }
                    else{
                    <RadzenTextBox Change="@(args => order[@col.Key] = args)"
                                  Value=@(order.TryGetValue(@col.Key, out object k)?k?.ToString():"")
                                  Name="@col.Key" aria-label="Enter {col.Key}" />
                    }

                  }
                }
              </EditTemplate>              
              <Template>
                @if (col.Value == "System.DateTime") {
                  if (context[@col.Key] != null && !string.IsNullOrWhiteSpace(context[@col.Key].ToString()) && context[@col.Key].GetType() == typeof(DateTime)  ){
                    @(((DateTime)context[@col.Key]).ToString("yyyy-MM-dd"))
                  }
                  else{                  
                    @context[@col.Key] 
                  }
                }
                else if (col.Value == "System.Boolean") {
                  @if((bool)context[@col.Key]){
                    <RadzenIcon Icon="done" />
                  }
                  else {                  
                  }
                }
                else {
                  @context[@col.Key]
                }
              </Template>
            </RadzenDataGridColumn>
        
            
        
          }
        }
      }


      @if (cols != null && cols.Count > 0 && (IsSave || IsAction || IsDelete)) {
        <RadzenDataGridColumn Filterable=false Sortable="false" Width="auto"  />
      }


  </Columns>

    <FooterTemplate >
      <div class="action-btn px-1 py-1">
        @if (cols != null && cols.Count > 0 && (IsSave || IsAction || IsDelete)) {
          <a class="action float-start" @onclick=@(() => InsertAfterRow(null))><i class="bi bi-plus-square"></i></a>
          <a class="action float-start" @onclick=@(() => CopyAfterRow(null))><i class="bi bi-copy"></i></a>
        }

        <a class="action float-end" @onclick=@(() => ToggleFilter())><i class="bi bi-filter"></i></a>
        <span class="action float-end">@orders.Count items</span>
      </div>
    </FooterTemplate>

</RadzenDataGrid>

}



@if (AllowPaging){
    <style>
        /* 컴포넌트 인스턴스별로 고유 클래스 사용 */
        .@quriGrdHash .rz-pager-element {
            display: block !important;
        }
    </style>
}









@code{

  private string quriGrdHash = $"quri-pager-{Guid.NewGuid()}";

  protected void OnDropDownChanged(string colKey, IDictionary<string, object> order, CommonCode? selected)
{
    dropDownValues[colKey] = selected;
    order[colKey] = selected?.Code ?? "";
    StateHasChanged();
}

  protected string GetWidth(string typeStr, string unit = "px"){
    string result = "100";
    if (typeStr == "System.DateTime") {
      result = "140";
    }
    else if (typeStr == "System.Int32") {
      result = "60";
    }
    else if (typeStr == "System.Boolean") {
      result = "40";
    }

    return result+unit;
  }

  protected string ActionWidth() {
    int v = 10;

    if (IsSave ) {      v += 32;    }
    if (IsAction) { v += 32; }
    if (IsDelete) { v += 32; }

    return v + "px";
  }

  bool IsToggle{get;set;}=false;
  protected void ToggleFilter() {
    IsToggle = !IsToggle;
  }


}