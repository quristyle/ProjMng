@using Radzen  
@using Radzen.Blazor  
@using System.Linq.Expressions  

<div class="rz-p-1 rz-text-align-center"> 
    <RadzenCheckBox 
        TValue="bool" 
        Value="@Value" 
        Placeholder="@Placeholder" 
        Style="@InputStyle"  
        ValueChanged="@OnValueChanged"  
        ValueExpression="ValueExpression"  
        Disabled=Disable  
        Name="CheckBox1"
    />  
    <RadzenLabel Text="@Text" Component="CheckBox1" class="rz-ms-2" />
</div>

@code {  
    [Parameter] public string Text { get; set; }  
    [Parameter] public string Placeholder { get; set; }  
    [Parameter] public string InputStyle { get; set; }  
    [Parameter] public bool Disable { get; set; }  

    [Parameter] public bool Value { get; set; } = false;  

    [Parameter] public EventCallback<bool> ValueChanged { get; set; }  

    [Parameter] public Expression<Func<bool>> ValueExpression { get; set; }  

    private async Task OnValueChanged(bool value) {  
        if (Value != value) {  
            Value = value;  
            await ValueChanged.InvokeAsync(value);  
        }  
    }  
}