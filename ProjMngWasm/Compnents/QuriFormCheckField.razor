@using Radzen  
@using Radzen.Blazor  
@using System.Linq.Expressions  

<RadzenFormField Text="@Text" Variant=Variant.Outlined AllowFloatingLabel="false">  
    <RadzenCheckBox TValue="bool" Value="@Value" Placeholder="@Placeholder" Style="@InputStyle"  
        ValueChanged="@OnValueChanged"  
        ValueExpression="ValueExpression"  
        Disabled=Disable  
    />  
</RadzenFormField>  

@code {  
    [Parameter] public string Text { get; set; }  
    [Parameter] public string Placeholder { get; set; }  
    [Parameter] public string InputStyle { get; set; }  
    [Parameter] public bool Disable { get; set; }  

    [Parameter] public bool Value { get; set; } = false;  

    [Parameter] public EventCallback<bool> ValueChanged { get; set; }  

    [Parameter] public Expression<Func<bool>> ValueExpression { get; set; }  

    private async Task OnValueChanged(bool value) {  
        if (Value != value) {  
            Value = value;  
            await ValueChanged.InvokeAsync(value);  
        }  
    }  
}