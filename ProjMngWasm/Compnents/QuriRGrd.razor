@{
  /* description : radzen rapping 그리드
  * title : radzen rapping 그리드
  * sort : 0
  * credt : 2025-07-16
  * author : quristyle
  */
}
@typeparam TItem
@inject IJSRuntime JS
@using System.Diagnostics.CodeAnalysis
@using System.Text.Json

@inherits BaseComponent

<RadzenDataGrid TItem="TItem"
                Data="@_Data"
                IsLoading=isLoading
                @ref=@_Grd
                CellClick="@OnCellClick"
                RowUpdate="@OnUpdateRow"
                AllowFiltering="true"
                AllowSorting="true"
                AllowPaging="false"
                AllowColumnResize="true"
                FilterMode="Radzen.FilterMode.Simple"
                SelectionMode="Radzen.DataGridSelectionMode.Single"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Style="height:100%;"
                FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="Radzen.LogicalFilterOperator.And"
                Sort="@(args => Reset())" Page="@(args => Reset())" Filter="@(args => Reset())"
                >
            <Columns>

    
              <RadzenDataGridColumn TItem="TItem" title="TableName" Property="TableName"  />

              <RadzenDataGridColumn TItem="TItem" Property="Description" Title="Desc" IsInEditMode="@IsEditing" >
                  <Template Context="order">
                      <RadzenText Text="@((order as TableInfo).Description)" />
                  </Template>
                  <EditTemplate Context="order">
                      <RadzenTextBox @ref="editor" Change="@(args => Update())" @bind-Value="(order as TableInfo).Description" Name="Description" aria-label="Enter Description" />
                      <RadzenRequiredValidator Text="Description is required" Component="Description" Popup="true" />
                  </EditTemplate>
              </RadzenDataGridColumn>



            </Columns>
</RadzenDataGrid>


@code {
  
  [Parameter] public RenderFragment ChildContent { get; set; }
  [Parameter] public List<TItem> _Data { get; set; }

  RadzenDataGrid<TItem> _Grd{ get; set; }

  
  IRadzenFormComponent editor;


  bool editorFocused;
  List<TItem> ordersToUpdate = new();
  string columnEditing;


  List<KeyValuePair<string, string>> editedFields = new List<KeyValuePair<string, string>>();



  void Reset()  {
      Reset(default);
  }


  void Reset(TItem order)  {
      editorFocused = false;
    if (!EqualityComparer<TItem>.Default.Equals(order, default)) {
        ordersToUpdate.Remove(order);
    } else {
        ordersToUpdate.Clear();
    }
  }

  
  public bool IsEditing(string columnName, TItem order)    {
      // Comparing strings is quicker than checking the contents of a List, so let the property check fail first.
      return columnEditing == columnName && ordersToUpdate.Contains(order );
  }




  async Task OnCellClick(DataGridCellMouseEventArgs<TItem> args)    {
        if (!_Grd.IsValid || 
            (ordersToUpdate.Contains(args.Data) && columnEditing == args.Column.Property)) return;

        // Record the previous edited field, if you're not using IRevertibleChangeTracking to track object changes
        if (ordersToUpdate.Any())        {
          var tname = (ordersToUpdate.First() as TableInfo).TableName;
            editedFields.Add(new(tname, columnEditing));
            await Update();
        }

        // This sets which column is currently being edited.
        columnEditing = args.Column.Property;

        // This sets the Item to be edited.
        await EditRow(args.Data);
    }


    

    public async Task Update()    {
        editorFocused = false;

        if (ordersToUpdate.Any())        {
            await _Grd.UpdateRow(ordersToUpdate.First());
        }
    }

    async Task EditRow(TItem order)    {
        Reset();

        ordersToUpdate.Add(order);

        await _Grd.EditRow(order);
    }




    
    void OnUpdateRow(TItem order)    {
        Reset(order);
    // Dictionary<string, string> dic = new Dictionary<string, string>() {
    //   {"db",dbType.Others["db_type"]},
    //   {"dbnick",dbType.Others["db_nick"]},
    //   {"schema",dbType.Others["db_schema"]},
    //   {"table_name", order.TableName },
    //   {"table_desc", order.Description },
    //   };

    //   JsCont<TableInfo>("tableCommentUpdate", dic);
    }





    protected override async Task OnAfterRenderAsync(bool firstRender)    {
      await base.OnAfterRenderAsync(firstRender);

      if (!editorFocused && editor != null)        {
        editorFocused = true;

        try            {
            await editor.FocusAsync();
        }
        catch            {
            //
        }
      }
    }

    bool isLoading {get;set;}


    
    /// <summary>
    /// resultinfo data list binding 
    /// </summary>
    /// <param name="procName"></param>
    /// <param name="dic"></param>
    /// <returns></returns>
    public async Task Load(string procName, Dictionary<string, string> dic) {

      isLoading = true;
      await InvokeAsync(StateHasChanged);


      RequestDto rd = appData.CreateDto(procName, dic);

      var ri = await devService.GetList<TItem>(rd);
      if(ri.Code < 0) {
        Console.WriteLine($" Grd Load Error : {ri.Message}");
      }
      else {
        _Data = ri.Data.ToList();
      }

      isLoading = false;
      //await Reload();
      await InvokeAsync(StateHasChanged);
    }










}
