@using System.Diagnostics.CodeAnalysis
@using BlazorMonaco;
@using BlazorMonaco.Editor;
@using System.Text.RegularExpressions




@* ConstructionOptions=AppProjData.FnPgsqlOtion *@


@inherits BaseComponent
<div class="editor-wrapper">
<StandaloneCodeEditor @ref="_editor" CssClass="code-editor" ConstructionOptions="AppProjData.FnPgsqlOtion"
OnKeyDown="OnKeyDown" 
OnDidInit="OnEditorInit"
/>
<a class="copy-button" @onclick="CopyTextToClipboard"><i class="bi bi-copy"></i></a>
</div>

<style>
  .editor-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .copy-button {
    position: absolute;
    top: 10px;
    right: 20px;
    z-index: 10;
    color: white;
    border: none;
    padding: 3px 6px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
  }

  .copy-button:hover {
   background-color: #007bff;
  }
  </style>


@code {
   StandaloneCodeEditor? _editor;


   // 이런식으로 접근해서 변경 가능한것 같다.
      //  await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, e.Value?.ToString());


   
  [Parameter] public EventCallback<KeyboardEvent> KeyDownEvent { get; set; }

  //public delegate Task CommandHandler();


  
    // 외부에서 주입받을 파라미터
    [Parameter] public string EditOption { get; set; }
    [Parameter] public EventCallback<string> EditOptionChanged { get; set; }

    //2.	EditOption 값 변경 시 EditOptionChanged 호출 만약 컴포넌트 내부에서 EditOption 값을 변경한다면, 아래처럼 호출해야 합니다:
    //await EditOptionChanged.InvokeAsync(newValue);

    // ConstructionOptions 에 전달될 함수
      private StandaloneEditorConstructionOptions GetEditorOptions(StandaloneCodeEditor editor)    {
            Console.WriteLine($" GetEditorOptions : {EditOption}");
        if (string.IsNullOrEmpty(EditOption))        {
          return AppProjData.PgsqlOption;
        }
        else if(EditOption=="html" ||EditOption=="jsp"){
          return AppProjData.HtmlOption;
        } 
        else if(EditOption=="js"){
          return AppProjData.JsOption;
        } 
        //else if(EditOption=="sql"){
        //  return AppProjData.PgsqlOption;
        //} 
        //else {
        //  return AppProjData.GetOption( EditOption );
        //}

        // 기본 옵션
        return AppProjData.PgsqlOption;
    }


    
    // private async Task ChangeLanguageAsync(string newLanguage)
    // {
    //     var model = await _editor.GetModel();
    //     if (model != null)
    //     {
    //         await _editor   .SetModelLanguage(model.Id, newLanguage);
    //     }
    // }


    private string _prevEditOption;

    protected override async Task OnParametersSetAsync() {
        // EditOption 값이 변경된 경우에만 동작
        if (_editor != null && _prevEditOption != EditOption)        {

          //_editor.ConstructionOptions = AppProjData.GetOption( EditOption );
         // _editor.ConstructionOptions = editor => AppProjData.GetOption(EditOption);


         
 //await ChangeLanguageAsync( EditOption );

          //StateHasChanged();

            // var newOptions = GetEditorOptions(_editor);

            // _editor.


            // await _editor.UpdateOptions(newOptions);
             _prevEditOption = EditOption;
        }
    }

private string? _modelUri;

    private async Task ChangeLanguageAsync(string newLang)
{
    var model = await _editor.GetModel();
    if (model is not null)
    {



        _modelUri = model.Uri;
        await jsRuntime.InvokeVoidAsync("window.blazorMonaco.editor.setModelLanguage",            _modelUri, newLang);
    }
}



public async Task LanguageChange(string lang){
  
            Console.WriteLine($" LanguageChange : {lang}");



        // EditOption 값이 변경된 경우에만 동작
        if (_editor != null && _prevEditOption != lang)        {





          //_editor.ConstructionOptions = AppProjData.GetOption( EditOption );
         // _editor.ConstructionOptions = editor => AppProjData.GetOption(EditOption);


         
 await ChangeLanguageAsync( lang );

          //StateHasChanged();

            // var newOptions = GetEditorOptions(_editor);

            // _editor.


            // await _editor.UpdateOptions(newOptions);
             _prevEditOption = lang;
             StateHasChanged();
        }
}





  private async Task OnEditorInit(){


    //ConstructionOptions

    //_editor.ConstructionOptions = AppProjData.FnPgsqlOtion(_editor);

    // Ctrl+Enter 단축키 등록
    


        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.Enter, (editor, keyCode) =>
        {
            Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
        });
}




  protected async Task OnKeyDown(KeyboardEvent e) {

    KeyDownEvent.InvokeAsync(e);

  }


  public async Task<string> GetValue() {
    string editorValue = await _editor.GetValue();
    return editorValue;
  }

  //커서가 속한 문장 블록을 리턴한다.
  public async Task<string> GetCursorPosValue() {
    string text = await _editor.GetValue();
    var pos = await _editor.GetPosition();
    int cursorLine = pos.LineNumber - 1; // 0-based index

    // 줄 단위로 분리
    var lines = Regex.Split(text, @"\r?\n");
    var blocks = new List<(int startLine, int endLine, string blockText)>();

    int start = 0;
    while (start < lines.Length) {
        // 빈 줄이 아닌 곳에서 시작
        while (start < lines.Length && string.IsNullOrWhiteSpace(lines[start]))
            start++;
        if (start >= lines.Length) break;

        int end = start;
        // 빈 줄이 나올 때까지 블록 확장
        while (end < lines.Length && !string.IsNullOrWhiteSpace(lines[end]))
            end++;

        // 블록 저장
        var blockText = string.Join("\n", lines[start..end]);
        blocks.Add((start, end - 1, blockText));
        start = end;
    }

    // 커서가 속한 블록 찾기
    foreach (var block in blocks) {
        if (cursorLine >= block.startLine && cursorLine <= block.endLine)
            return block.blockText;
    }
    // 못 찾았을 경우, 커서보다 위에 있는 가장 가까운 블록 반환
    string lastBlock = string.Empty;
    foreach (var block in blocks) {
        if (cursorLine >= block.endLine)
            lastBlock = block.blockText;
        else
            break;
    }
    return lastBlock;
}




  public async Task SetValue(string value) {
    _editor.SetValue(value);
    _editor.SetScrollPosition( new NewScrollPosition(){ ScrollLeft=0, ScrollTop=0} );
  }

  private async Task CopyTextToClipboard() {
    var str = await _editor.GetValue();
    await jsRuntime.InvokeVoidAsync("copyClipboard", str);

    Notify(NotificationSeverity.Success, "알림", "Copyed !!", 2*1000, false);

  }


}
