@inherits Radzen.RadzenComponent

<select style="display:none;" class="form-select form-select-sm">
  <option value="1">plaintext</option>
  <option value="2">abap</option>
  <option value="3">apex</option>
  <option value="4">azcli</option>
  <option value="5">bat</option>
  <option value="6">bicep</option>
  <option value="7">cameligo</option>
  <option value="8">clojure</option>
  <option value="9">coffeescript</option>
  <option value="10">c</option>
  <option value="11">cpp</option>
  <option value="12">csharp</option>
  <option value="13">csp</option>
  <option value="14">css</option>
  <option value="15">cypher</option>
  <option value="16">dart</option>
  <option value="17">dockerfile</option>
  <option value="18">ecl</option>
  <option value="19">elixir</option>
  <option value="20">flow9</option>
  <option value="21">fsharp</option>
  <option value="22">freemarker2</option>
  <option value="23">freemarker2.tag-angle.interpolation-dollar</option>
  <option value="24">freemarker2.tag-bracket.interpolation-dollar</option>
  <option value="25">freemarker2.tag-angle.interpolation-bracket</option>
  <option value="26">freemarker2.tag-bracket.interpolation-bracket</option>
  <option value="27">freemarker2.tag-auto.interpolation-dollar</option>
  <option value="28">freemarker2.tag-auto.interpolation-bracket</option>
  <option value="29">go</option>
  <option value="30">graphql</option>
  <option value="31">handlebars</option>
  <option value="32">hcl</option>
  <option value="33">html</option>
  <option value="34">ini</option>
  <option value="35">java</option>
  <option value="36">javascript</option>
  <option value="37">julia</option>
  <option value="38">kotlin</option>
  <option value="39">less</option>
  <option value="40">lexon</option>
  <option value="41">lua</option>
  <option value="42">liquid</option>
  <option value="43">m3</option>
  <option value="44">markdown</option>
  <option value="45">mdx</option>
  <option value="46">mips</option>
  <option value="47">msdax</option>
  <option value="48">mysql</option>
  <option value="49">objective-c</option>
  <option value="50">pascal</option>
  <option value="51">pascaligo</option>
  <option value="52">perl</option>
  <option value="53">pgsql</option>
  <option value="54">php</option>
  <option value="55">pla</option>
  <option value="56">postiats</option>
  <option value="57">powerquery</option>
  <option value="58">powershell</option>
  <option value="59">proto</option>
  <option value="60">pug</option>
  <option value="61">python</option>
  <option value="62">qsharp</option>
  <option value="63">r</option>
  <option value="64">razor</option>
  <option value="65">redis</option>
  <option value="66">redshift</option>
  <option value="67">restructuredtext</option>
  <option value="68">ruby</option>
  <option value="69">rust</option>
  <option value="70">sb</option>
  <option value="71">scala</option>
  <option value="72">scheme</option>
  <option value="73">scss</option>
  <option value="74">shell</option>
  <option value="75">sol</option>
  <option value="76">aes</option>
  <option value="77">sparql</option>
  <option value="78">sql</option>
  <option value="79">st</option>
  <option value="80">swift</option>
  <option value="81">systemverilog</option>
  <option value="82">verilog</option>
  <option value="83">tcl</option>
  <option value="84">twig</option>
  <option value="85">typescript</option>
  <option value="86">typespec</option>
  <option value="87">vb</option>
  <option value="88">wgsl</option>
  <option value="89">xml</option>
  <option value="90">yaml</option>
  <option value="91">json</option>
</select>


<div @ref="editor" style="height: 65vh; width: 100%;" dir="ltr"></div>
@code {
    IJSObjectReference monaco;
    ElementReference editor;
    DotNetObjectReference<Monaco> reference;

    [Parameter]    public string Value { get; set; }

    [Parameter]    public bool ReadOnly { get; set; }

    [Parameter]    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]    public string Language { get; set; } = "pgsql";

    public string Id => GetId();

    protected override async Task OnAfterRenderAsync(bool firstRender)    {
        if (firstRender)        {
            reference = DotNetObjectReference.Create(this);

            monaco = await JSRuntime.InvokeAsync<IJSObjectReference>("createEditor", editor, GetId(), reference, new {
                language = Language,
        theme = "vs-dark",             // BuiltinTheme: "vs" | "vs-dark" | "hc-black" | "hc-light"
        codeLens = true,
                readOnly = ReadOnly,
                minimap = new {
                    enabled = true
                },
                automaticLayout = true
            });

            interopValue = Value;

            await monaco.InvokeVoidAsync("setValue", interopValue);
        }
    }

    private string interopValue;

    [JSInvokable]
    public async Task OnChangeAsync(string value)    {
        if (Value != value)        {
            interopValue = value;
            await ValueChanged.InvokeAsync(value);
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)    {

    var valueChanged = parameters.DidParameterChange(nameof(Value), Value);
    var readOnlyChanged = parameters.DidParameterChange(nameof(ReadOnly), ReadOnly);
    var languageChanged = parameters.DidParameterChange(nameof(Language), Language);

    await base.SetParametersAsync(parameters);

        if (monaco != null && valueChanged && interopValue != Value)        {
            interopValue = Value;

            await monaco.InvokeVoidAsync("setValue", interopValue);
        }
        
        if (monaco != null && readOnlyChanged)        {
            await monaco.InvokeVoidAsync("setOptions", new { readOnly = ReadOnly });
    }

    if (monaco != null && languageChanged) {
      await monaco.InvokeVoidAsync("setOptions", new { language = Language });
    }

    }

    public override void Dispose()    {
        base.Dispose();

        if (JSRuntime != null && monaco != null)        {
            monaco.InvokeVoidAsync("dispose");
        }

        monaco?.DisposeAsync();

        reference?.Dispose();
    }
}
