@inherits BaseComponent
@if (ReqData != null){
<RadzenDataGrid Data="@_data" Style="height: 65vh;" @ref="ordersGrid"
                TItem="IDictionary<string, object>"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                RowUpdate="@OnUpdateRow" 
                RowCreate="@OnCreateRow"
                LogicalFilterOperator="LogicalFilterOperator.And"                      
                AllowFiltering="true" 
                AllowColumnResize="true" 
                FilterMode="FilterMode.Simple"
                SelectionMode="DataGridSelectionMode.Single"
                AllowPaging="false" 
                AllowSorting="true"
                PagerHorizontalAlign="HorizontalAlign.Left" 
                ShowPagingSummary="true">
  <Columns>

    @foreach (var col in cols)        {
      <RadzenDataGridColumn @key=@col.Key 
                              Title="@col.Key"                               
                            Type=@GetType(col.Value)
                            Property="@PropertyAccess.GetDynamicPropertyExpression( col.Key, GetType(col.Value) )"
      >

        <EditTemplate Context="order">

          @* 뭔가 타입에 맞는 컨트롤을 지정하기전에 수정불가 항목을 처리할 로직을 여기서 정의 *@

          @if (col.Value == "System.DateTime") {
              <RadzenDatePicker @bind-Value=@order[col.Key] DateFormat="yyyy-MM-dd"      />
            } 
            else if (col.Value == "System.Int32") {
            <RadzenNumeric @bind-Value=@order[col.Key] />
            }
            else {
            <RadzenTextBox Change="@(args => order[@col.Key] = args)"
                            Value=@(order.TryGetValue(@col.Key, out object k)?k.ToString():"")
                            Name="@col.Key" aria-label="Enter {col.Key}" />
            
            }
        </EditTemplate>
              

              

        <Template>


          @if (col.Value == "System.DateTime") {
            if (context[@col.Key] != null && !string.IsNullOrWhiteSpace(context[@col.Key]?.ToString()) && context[@col.Key].GetType() == typeof(DateTime)
        ){
              //@vrst.ToString("yyyy-MM-dd");

                  
            @(((DateTime)context[@col.Key]).ToString("yyyy-MM-dd"))

            }
            else{
                  
            @context[@col.Key]

            }


          }
          else {
          @context[@col.Key]
          }
        </Template>
      </RadzenDataGridColumn>
    }

    <RadzenDataGridColumn Context="IDictionary<string, object>" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
      <Template Context="order">
        <RadzenButton Icon="add_circle" Click="@(() => InsertAfterRow(order))" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />

        <RadzenButton Icon="edit" Click="@(args => EditRow(order))" @onclick:stopPropagation="true" />
        <RadzenButton Icon="delete" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true" />

      </Template>
      <EditTemplate Context="order">
        <RadzenButton Icon="check" Click="@((args) => SaveRow(order))" aria-label="Save" />
        <RadzenButton Icon="close" Click="@(args => CancelEdit(order))" aria-label="Cancel" />
        <RadzenButton Icon="delete" Click="@(args => DeleteRow(order))" aria-label="Delete" />

      </EditTemplate>
    </RadzenDataGridColumn>

  </Columns>
</RadzenDataGrid>
}
@code {

  public string srtype { get; set; }
  RadzenDataGrid<IDictionary<string, object>> ordersGrid;
  IEnumerable<IDictionary<string, object>> orders;

  List<IDictionary<string, object>> ordersToInsert = new List<IDictionary<string, object>>();
  List<IDictionary<string, object>> ordersToUpdate = new List<IDictionary<string, object>>();

  DataGridEditMode editMode = DataGridEditMode.Single;

  public IDictionary<string, string> cols { get; set; } = new Dictionary<string, string>();

  [Parameter] public EventCallback<IDictionary<string, object>> SaveBtnEvent { get; set; }
  [Parameter] public EventCallback<IDictionary<string, object>> DeleteBtnEvent { get; set; }


  
 IEnumerable<Dictionary<string, object>> _data { get; set; }

  ResultInfo<Dictionary<string, object>> _req { get; set; }

  [Parameter]
  public ResultInfo<Dictionary<string, object>> ReqData {
    get { return _req;}
    set{
  _req = value;
    _data = value.Data;
    cols = value.Cols;  
  } }



  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
  }





  void Reset()    {
    ordersToInsert.Clear();
    ordersToUpdate.Clear();
  }

  void Reset(IDictionary<string, object> order) {
    ordersToInsert.Remove(order);
    ordersToUpdate.Remove(order);
  }




  protected void ChangeDataType( ResultInfo<Dictionary<string, object>> res ){

    var data = res.Data;
    var cols = res.Cols;

    foreach( var c in cols){
      if( c.Value == "System.Int32"){
      
        string ckey = c.Key;
        
        foreach (var d in data) {

          d[ckey] = int.Parse(d[ckey]?.ToString());

        }



      }
    }

  }


  protected Type GetType( string clsStr ){
    Type type = Type.GetType(clsStr);

    // if (clsStr == "System.DateTime") {      type = typeof(DateTime);    } 
    // else if (clsStr == "System.Int32") {      type = typeof(int);    } 
    // else if (clsStr == "System.Double") {      type = typeof(double);    } 
    // else if (clsStr == "System.Boolean") {      type = typeof(bool);    }

    return type;
  }


  async Task EditRow(IDictionary<string, object> order) {
    if (!ordersGrid.IsValid) return;

    if (editMode == DataGridEditMode.Single) {
      Reset();
    }

    ordersToUpdate.Add(order);
    await ordersGrid.EditRow(order);
  }


  void CancelEdit(IDictionary<string, object> order) {
    Reset(order);
    ordersGrid.CancelEditRow(order);

    //var orderEntry = dbContext.Entry(order);
    //if (orderEntry.State == EntityState.Modified) {
    //  orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
    //  orderEntry.State = EntityState.Unchanged;
    //}
  }



  Dictionary<string, object> CreateData(){

    var order = new Dictionary<string, object>();

    foreach (var c in cols) {
      order.Add(c.Key, "" );
    }
    return order;
  }


  async Task InsertRow() {
    if (!ordersGrid.IsValid) return;

    if (editMode == DataGridEditMode.Single) {
      Reset();
    }

    var order = CreateData();



    ordersToInsert.Add(order);
    await ordersGrid.InsertRow(order);
  }



  async Task DeleteRow(IDictionary<string, object> order) {
    Reset(order);

    if (orders.Contains(order)) {
      
      // 여기서 삭제

     await SaveBtnEvent.InvokeAsync(order);

      //var req = JoinDictionaries(order, new Dictionary<string, string>() { { "stp", "sp_projdel" } });

      //var saveobj = await JsiniService.GetList<IDictionary<string, object>>(req);
      await ordersGrid.Reload();
    }
    else {
      ordersGrid.CancelEditRow(order);
      await ordersGrid.Reload();
    }
  }




  async Task InsertAfterRow(IDictionary<string, object> row) {
    if (!ordersGrid.IsValid) return;

    if (editMode == DataGridEditMode.Single) {
      Reset();
    }

    var order = CreateData();
    ordersToInsert.Add(order);
    await ordersGrid.InsertAfterRow(order, row);
  }

  async Task OnCreateRow(IDictionary<string, object> order) {
    //dbContext.Add(order);

    //dbContext.SaveChanges();

  await  DataSave(order);
    ordersToInsert.Remove(order);
  }



  async Task SaveRow(IDictionary<string, object> order) {
    await ordersGrid.UpdateRow(order);
  }


  async Task OnUpdateRow(IDictionary<string, object> order) {

    await DataSave(order);
    Reset(order);

    //dbContext.Update(order);

    //dbContext.SaveChanges();
  }


  async Task DataSave(IDictionary<string, object> order) {

    
     await SaveBtnEvent.InvokeAsync(order);


    //var req = JoinDictionaries(order, new Dictionary<string, string>() { { "stp", "sp_projsave" } });

    //var saveobj = await JsiniService.GetList<IDictionary<string, object>>(req);

  }









}
