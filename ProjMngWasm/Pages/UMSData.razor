@page "/umsw";
@inherits BaseComponent

<RadzenCard >
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                       
      <RadzenLabel Text="UI ID" />
            <RadzenText >@selectedItems?[0]["a"]</RadzenText>
</RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                       
      <RadzenLabel Text="Menu Name" />
            <RadzenText >@selectedItems?[0]["d"]</RadzenText>
</RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px"> 
      <RadzenLabel Text="Save" />
        <RadzenButton Click="@OnSave" Text="complete"></RadzenButton>        
 </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
      <RadzenLabel Text="User" Component="DropDownTextValueProperties" />
      <QuriDropDown @bind-Value="srtype" CodeId="projuser" > </QuriDropDown>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
      <RadzenLabel Text="Search" />
            <RadzenButton Click="@OnLoadWrk" Text="Load Work"></RadzenButton>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

<RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="1rem">
    <RadzenColumn Size="12" class=" rz-text-align-center rz-p-2">
        

      <RadzenDataGrid Data="@data2" @bind-Value=@selectedItems  Style="height: 700px"
  TItem="IDictionary<string, object>" 
  ColumnWidth="100px"
      FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
      LogicalFilterOperator="LogicalFilterOperator.And"                      
      AllowFiltering="true" 
      AllowColumnResize="true" 
      FilterMode="FilterMode.Simple"
      SelectionMode="DataGridSelectionMode.Single"
                AllowPaging="false" 
                AllowSorting="true"
                

                  PagerHorizontalAlign="HorizontalAlign.Left" 
                  ShowPagingSummary="true">

                 @* PageSize="5"  *@

  <Columns>
    
        @foreach (var column in cols)        {
            <RadzenDataGridColumn @key=@column.Key Title="@column.Key" Type="column.Value"
                                  Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                <Template>
                    @context[@column.Key]
                </Template>
            </RadzenDataGridColumn>
        }
    
  </Columns>
</RadzenDataGrid>

    </RadzenColumn>
</RadzenRow>

@code {
  IEnumerable<CommonCode> _workList ;
  public IDictionary<string, string> workChoice = new Dictionary<string, string>() { { "11", "quristyle all" }, { "12", "quristyle wait" }, { "13", "ui user" } };

public string srtype { get; set; } = "12";


  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    _workList = workChoice.Select(p => new CommonCode { Name = p.Value, Code = p.Key }).ToList();
    await OnLoadWrk();
  }




protected async Task OnLoadWrk() {
  cols.Clear();
  data2 = await UmsService.GetList("p_work", new Dictionary<string, object>() { { "SRTP", srtype } });

  if (data2 != null && data2.Any()){
    foreach( var dd in data2 ){
      foreach( var d in dd ){
       cols.Add( d.Key, typeof(string) );
      }
      break;
    }
  }
    //data2 = dt.AsEnumerable();
}

protected async Task OnSave() {
  cols.Clear();
  data2 = await UmsService.GetList("p_work", new Dictionary<string, object>() { { "SRTP", srtype }, { "ID", selectedItems?[0]["a"] }, { "EDT", DateTime.Now.ToString("yyyy-MM-dd") } });
}

IList<IDictionary<string, object>> selectedItems;
  
public IEnumerable<IDictionary<string, object>> data2 { get; set; }
  
public IDictionary<string, Type> cols { get; set; } = new Dictionary<string, Type>();



}
