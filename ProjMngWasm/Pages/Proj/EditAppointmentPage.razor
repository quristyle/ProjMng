@using System.Reflection
@inject DialogService DialogService

@inherits PageBaseComponent
<RadzenTemplateForm TItem="WbsInfo" Data="@model" Submit=@OnSubmit>
  <RadzenStack Gap="1rem">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
      <RadzenLabel Text="Title" Style="width: 6rem;" />
      <RadzenTextBox @bind-Value="@model.proc_nm" Name="Text" Style="width: 20rem;" />
      <RadzenRequiredValidator Component="Text" Text="Title is required" />
      <RadzenLabel Text="완료여부" Style="width: 6rem;" />
      <RadzenCheckBox  @bind-Value="@model.isComplatge" />
    </RadzenStack>


    
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
      <RadzenLabel Text="종류" Style="width: 6rem;" />
      <QuriDropDown CodeId="schedule_type" @bind-Value=@_schedule_type Name="schedule_type"  Style="width: 12rem;" />
      <RadzenRequiredValidator Component="schedule_type" Text="Start is required" />
    </RadzenStack>




    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
      <RadzenLabel Text="Start" Style="width: 6rem;" />
      <RadzenDatePicker @bind-Value="@model.plan_sdt" Name="Start"  Style="width: 12rem;" DateFormat="yyyy-MM-dd" >
        <FooterTemplate>
            <RadzenButton Click=@(args => model.plan_sdt = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
        </FooterTemplate>
    </RadzenDatePicker>
      <RadzenRequiredValidator Component="Start" Text="Start is required" />

      
      <RadzenLabel Text="End" Style="width: 6rem;" />
      <RadzenDatePicker Name="End" @bind-Value="@model.plan_edt"  Style="width: 12rem;" DateFormat="yyyy-MM-dd" >
        <FooterTemplate>
            <RadzenButton Click=@(args => model.plan_edt = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
        </FooterTemplate>
    </RadzenDatePicker>
      <RadzenRequiredValidator Component="End" Text="End is required" />


    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
      
      <RadzenLabel Text="Run Start" Style="width: 6rem;" />
      <RadzenDatePicker @bind-Value="@model.dev_sdt" Name="RunStart"  Style="width: 12rem;" DateFormat="yyyy-MM-dd" >
        <FooterTemplate>
            <RadzenButton Click=@(args => model.dev_sdt = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
        </FooterTemplate>
    </RadzenDatePicker>

      
      <RadzenLabel Text="Run End" Style="width: 6rem;" />
      <RadzenDatePicker Name="RunEnd" @bind-Value="@model.dev_edt"  Style="width: 12rem;" DateFormat="yyyy-MM-dd" >
        <FooterTemplate>
            <RadzenButton Click=@(args => model.dev_edt = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
        </FooterTemplate>
    </RadzenDatePicker>


    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
      <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
      <RadzenButton  Text="MoveToday" Click=OnTodayAndSave />
      <RadzenButton  Text="Delete" Click=OnDelete />
    </RadzenStack>
  </RadzenStack>
</RadzenTemplateForm>
@code {
  [Parameter]  public WbsInfo Appointment { get; set; }

  WbsInfo model = new WbsInfo();
  CommonCode _schedule_type {get;set;}
  
  [Parameter]  public DateTime? Start { get; set; }

  [Parameter]  public DateTime? End { get; set; }

  [Parameter]  public string PrjRid { get; set; }


  protected override void OnParametersSet() {
    if( Appointment == null){
      model.plan_sdt = Start;
      model.plan_edt = End;
      model.prj_rid = PrjRid;
      model.wbs_state = "READY";
    }
    else{
      model = Appointment;
    }
  }
  

  
  async Task OnDelete() {
    
    model.wbs_state = "DELETE";
    Dictionary<string, string> dic = model.ToDictionary();
    await DbDelete<Dictionary<string, object>>("sp_proj_wbs_exec", dic);

    DialogService.Close(model);
  }


  
  async Task OnTodayAndSave() {
    model.plan_sdt = DateTime.Now;
    model.plan_edt = DateTime.Now;

   await OnSubmit(model);
  }





  async Task OnSubmit(WbsInfo model) {
    if(model.isComplatge){
      if( model.dev_sdt == null ) model.dev_sdt = DateTime.Now;
      if( model.dev_edt == null ) model.dev_edt = DateTime.Now;
      model.wbs_state = "COMP";
    }
    else{
      if( model.dev_sdt == null && model.dev_edt == null ){
        model.wbs_state = "READY";
      }
      else{
        model.dev_edt = null;
        model.wbs_state = "RUNNING";
      }
    }
    if( _schedule_type != null){
      model.schedule_type =   _schedule_type.Code;
    }

    Dictionary<string, string> dic = model.ToDictionary();

    await DbSave<Dictionary<string, object>>("sp_proj_wbs_exec", dic);

    DialogService.Close(model);
  }




  

}