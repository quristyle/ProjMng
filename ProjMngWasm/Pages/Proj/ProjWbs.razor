@page "/proj-wbs";
@{
  /* description : 업무 WBS
  * title : WBS
  * sort : 4
  * credt : 2021-09-01
  * author : quristyle
  */
      }

@inherits PageBaseComponent

      <PageTitle>Jsini | WBS - @srtype?.Name</PageTitle>

      <RadzenCard >
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >

            <QuriSearchs AllLoadComplete=OnLoadWrk >
                <QuriDropDown  CodeId="projlist" @bind-Value=srtype Change=OnProjChange />
                <QuriDropDown CodeId="compstat" @bind-Value=compstat IsAll=true />
            </QuriSearchs>



          <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
            <RadzenButton Click="@OnLoadWrk" Text="Search" />
            <RadzenButton Click="@OnSaveWrk" Text="Save" />
          </RadzenStack>

        </RadzenStack>
      </RadzenCard>

      <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" class="context-body-row">
        <RadzenColumn Size="12" class="context-body-rowcol">

          <QuriDynamicGrid 
            @ref=wbsgrid
          SaveBtnEvent=SaveBtnEvent
          DeleteBtnEvent=DeleteBtnEvent
          AddBtnEvent=NewRowCreate
          CopyBtnEvent=CopyRowEvent
          AllowPaging=true
          ReqData=Data 
          DropDownCols="schedule_type|schedule_type"
          HiddenCols="prj_rid,proc_lvl,build_user,build_status,build_chk_dt,qc_chk_dt,cre_user,cre_dt,mod_user,mod_dt" />

        </RadzenColumn>
      </RadzenRow>

      @code {


        QuriDynamicGrid wbsgrid{ get; set; }
  CommonCode srtype { get; set; }
  CommonCode compstat { get; set; }
  

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    //await OnLoadWrk();
  }


  public ResultInfo<Dictionary<string, object>> Data { get; set; }


  protected async Task OnLoadWrk() {
      Console.WriteLine($"OnLoadWrk srtype: xxxxxxxxxxxxxxxxxxxxxxxxxx{srtype} ");
    await OnLoadWrk(srtype);
  }


  protected async Task OnLoadWrk(CommonCode cc) {
    Data = await DbCont<Dictionary<string, object>>("sp_proj_wbs_exec", new Dictionary<string, string>() {
     { "prj_rid", cc.Code },
     { "compstat", compstat?.Code },
     { "schedule_type", "WBS" },
    });
    StateHasChanged();
  }

  
  protected async Task OnSaveWrk() {
    await DbSave<Dictionary<string, object>>("sp_proj_wbs_exec", new Dictionary<string, string>() {
     { "prj_rid", srtype.Code },
     { "compstat", compstat?.Code },
     { "schedule_type", "WBS" },
    }, Data);
    await wbsgrid.Reload();
    
    StateHasChanged();
  }


  private async Task SaveBtnEvent(IDictionary<string, object> dic) {
    //var req = WasmUtil.JoinDictionaries(dic, new Dictionary<string, string>() { });
    await DbSave<Dictionary<string, object>>("sp_proj_wbs_exec", dic);
  }




  private async Task DeleteBtnEvent(IDictionary<string, object> dic) {
    await DbDelete<Dictionary<string, object>>("sp_proj_wbs_exec", dic);
  }


  private void NewRowCreate(IDictionary<string, object> args)  {
    args["prj_rid"] = srtype?.Code;
    StateHasChanged();
  }


  private void CopyRowEvent(IDictionary<string, object> args)  {
    args["prj_rid"] = srtype?.Code;
    StateHasChanged();
  }

  private async Task OnProjChange(object args) {
    CommonCode cc = args as CommonCode;
    await OnLoadWrk(cc);
  }
}
