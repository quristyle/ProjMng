@page "/projmng";
@inherits BaseComponent

<RadzenCard class="rz-my-6">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">

        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
      <QuriDropDown @bind-value="srtype" CodeId="projuser" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
            <RadzenButton Click="@OnLoadWrk" Text="Search" />
            <RadzenButton Click="@OnSave" Text="Save" />
        </RadzenStack>

    </RadzenStack>
</RadzenCard>

<RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" >
    <RadzenColumn Size="12" >
        
      <RadzenDataGrid Data="@data" Style="height: 700px"
  TItem="IDictionary<string, object>" 
      FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
      LogicalFilterOperator="LogicalFilterOperator.And"                      
      AllowFiltering="true" 
      AllowColumnResize="true" 
      FilterMode="FilterMode.Simple"
      SelectionMode="DataGridSelectionMode.Single"
                AllowPaging="false" 
                AllowSorting="true"
                 PagerHorizontalAlign="HorizontalAlign.Left" 
                  ShowPagingSummary="true">
  <Columns>
    
        @foreach (var column in cols)        {
            <RadzenDataGridColumn @key=@column.Key Title="@column.Key" Type="column.Value"
                                  Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                <Template>
                    @context[@column.Key]
                </Template>
            </RadzenDataGridColumn>
        }
    
  </Columns>
</RadzenDataGrid>

    </RadzenColumn>
</RadzenRow>

@code {
 
public string srtype { get; set; }

public IDictionary<string, Type> cols { get; set; } = new Dictionary<string, Type>();
  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    await OnLoadWrk();
  }


public IEnumerable<IDictionary<string, object>> data { get; set; }
  
protected async Task OnLoadWrk() {
  cols.Clear();
  data = await JsiniService.GetList<IDictionary<string, object>>(new Dictionary<string, string>() { { "stp", "sp_projdblist" } });  

  if (data != null && data.Any()){
    foreach( var dd in data ){
      foreach( var d in dd ){
       cols.Add( d.Key, typeof(string) );
      }
      break;
    }
  }

}

protected async Task OnSave() {
  //cols.Clear();
  //data2 = await UmsService.GetList("p_work", new Dictionary<string, object>() { { "SRTP", srtype }, { "ID", selectedItems?[0]["a"] }, { "EDT", DateTime.Now.ToString("yyyy-MM-dd") } });
}


}
