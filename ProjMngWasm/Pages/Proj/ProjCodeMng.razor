@page "/proj-code-mng";
@{
  /* description : 프로젝트 master 코드 정보
  * title : 프로젝트 코드 정보
      * sort : 2
      * credt : 2025-07-02
      * author : quristyle
      */
}
@inherits PageBaseComponent

<RadzenCard >
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >

    
    <QuriSearchs AllLoadComplete=OnLoadWrk >
      <QuriDropDown @bind-Value="srtype" CodeId="projlist" />
      <QuriDropDown @bind-Value="dbType" CodeId="projdb" Etc0=@srtype?.Code IsEtcFix=true  />
    </QuriSearchs>


    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
      <RadzenButton Click="@OnLoadWrk" Text="Search" />
    </RadzenStack>

  </RadzenStack>
</RadzenCard>



<RadzenSplitter Orientation="Orientation.Horizontal" class="context-body-row" style=" border: 1px solid rgba(0,0,0,.08);">

    
  <!-- 위쪽 -->
  <RadzenSplitterPane  Size="40%" Min="10%" Max="90%">

    <QuriDynamicGrid 
      ReqData=Data 
      SItemsChanged=OnDbInfoChange />


  </RadzenSplitterPane>
    <!-- 아래쪽 -->
  <RadzenSplitterPane Size="60%" Min="10%" Max="90%">

    <QuriDynamicGrid 
      ReqData=DbPropData  />

  </RadzenSplitterPane>

</RadzenSplitter>






@code {

  public CommonCode? srtype { get; set; }
  CommonCode? dbType { get; set; }

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
  }

  public ResultInfo<Dictionary<string, object>>? Data { get; set; }
  public List<IDictionary<string, object>>? SelDbInfo { get; set; }


  public ResultInfo<Dictionary<string, object>>? DbPropData { get; set; }
  public IList<IDictionary<string, object>>? SelDbProp { get; set; }





  protected async Task OnLoadWrk() {
    // 선택한 db의 codeMaster 를 구하여 해당 관리 쿼리들 동작한 결과를 리턴한다.

    Data = await JsProcDbReturn<Dictionary<string, object>>("code_master", dbType);

    //Data = await DbCont<Dictionary<string, object>>("sp_projdblist", new Dictionary<string, string>() {
    //{ "proj_rid",  srtype?.Code ?? string.Empty }
    //});
  }

  

  private async Task OnDbInfoChange(IList<IDictionary<string, object>> args) {    
    DbPropData = await JsProcDbReturn<Dictionary<string, object>>("code_detail", dbType, new Dictionary<string, string>() {
    { "parameter1",  args.FirstOrDefault()["cm_cd"].ToString() }
    });

  }


  


}
