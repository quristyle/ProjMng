@page "/proj-shceduler";
@{
  
  /* description : Schedule calendar
  * title : Schedule
  * sort : 5
  * credt : 2025-04-05
  * author : quristyle
  */

 }

@inherits PageBaseComponent

<PageTitle>Jsini | Scheduler - @srtype?.Name</PageTitle>

<RadzenCard >
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="4px">
      <QuriDropDown CodeId="projlist" @bind-Value=srtype />
      <QuriDropDown CodeId="compstat" @bind-Value=compstat InitialCode="DISCOMP" IsAll=true />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
      <RadzenButton Click="@OnLoadWrk" Text="Search" />
    </RadzenStack>

  </RadzenStack>
</RadzenCard>

<RadzenScheduler 
  @ref=@scheduler 
  SlotRender=@OnSlotRender 
  class="context-body-row" 
  TItem="WbsInfo" 
  Data=@Data 
  StartProperty="plan_sdt" 
  EndProperty="plan_edt"
  TextProperty="proc_nm" 
  SelectedIndex="0"
  SlotSelect=@OnSlotSelect 
  AppointmentSelect=@OnAppointmentSelect 
  AppointmentRender=@OnAppointmentRender 
  MonthSelect=@OnMonthSelect

  AppointmentMove=@OnAppointmentMove


>
  <RadzenMonthView />
  <RadzenYearPlannerView StartMonth="@startMonth" />
  <RadzenYearTimelineView StartMonth="@startMonth" />
  <RadzenYearView StartMonth="@startMonth" />
</RadzenScheduler>

@code {

  CommonCode srtype { get; set; }
  CommonCode compstat { get; set; } 

  RadzenScheduler<WbsInfo> scheduler;

  //Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
  Month startMonth = Month.January;


  List<WbsInfo> Data {get;set;}
    

  
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      //compstat = new CommonCode(){ Code="DISCOMP" };
    }
  }


  protected async Task OnLoadWrk() {
    var data = await DbCont<WbsInfo>("sp_proj_wbs_exec", new Dictionary<string, string>() {
     { "prj_rid", srtype?.Code },
     { "compstat", compstat?.Code },
    });
    Data = data.Data;
  }



  void OnSlotRender(SchedulerSlotRenderEventArgs args) {
    // Highlight today in month view
    //if (args.View.Text == "Month" && args.Start.Date == DateTime.Today) {
    if (args.Start.Date == DateTime.Today) {
      args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
    }

    // Draw a line for new year if start month is not January
    if ((args.View.Text == "Planner" || args.View.Text == "Timeline") && args.Start.Month == 12 && startMonth != Month.January) {
      args.Attributes["style"] = "border-bottom: thick double var(--rz-base-600);";
    }
  }

  async Task OnSlotSelect(SchedulerSlotSelectEventArgs args) {


    if (args.View.Text != "Year") {
      WbsInfo data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
          new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End }, {"PrjRid", srtype?.Code} });

      if (data != null) {
        Data.Add(data);
        // Either call the Reload method or reassign the Data property of the Scheduler
        await scheduler.Reload();
      }
    }
  }

  async Task OnMonthSelect(SchedulerMonthSelectEventArgs args) {

    await Task.CompletedTask;
  }

  async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<WbsInfo> args) {


    await DialogService.OpenAsync<EditAppointmentPage>("Edit WbsInfo", new Dictionary<string, object> { { "Appointment", args.Data } });

    await scheduler.Reload();
  }

  void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<WbsInfo> args) {
    // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
    

    switch(args.Data.wbs_state){
      case "READY" : 
      args.Attributes["style"] = "background: var( --rz-warning );";
      break;
      case "RUNNING" : 
      args.Attributes["style"] = "background: var( --rz-info );";
      break;
      case "OVER" : 
      args.Attributes["style"] = "background: var( --rz-danger );";
      break;
      case "COMP" : 
      args.Attributes["style"] = "background: var( --rz-secondary );";
      break;
    }

  }



  async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)    {
        var draggedAppointment = Data.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)        {
            var duration = draggedAppointment.plan_edt - draggedAppointment.plan_sdt;

            if (args.SlotDate.TimeOfDay == TimeSpan.Zero)            {
                draggedAppointment.plan_sdt = args.SlotDate.Date.Add(draggedAppointment.plan_sdt.Value.TimeOfDay);
            }
            else            {
                draggedAppointment.plan_sdt = args.SlotDate;
            }

            draggedAppointment.plan_edt = draggedAppointment.plan_sdt.Value.Add(duration.Value);

            await scheduler.Reload();
            
            await DbSave<Dictionary<string, object>>("sp_proj_wbs_exec", draggedAppointment.ToDictionary());

        }
    }






}
