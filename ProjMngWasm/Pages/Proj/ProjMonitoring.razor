@page "/proj-monitoring";
@{
    /* description : 프로젝트 상태 정보를 제공
    * title : 모니터링
    * sort : 30
    * credt : 2021-09-01
    * author : quristyle
    */
      }

@inherits PageBaseComponent

      <RadzenCard >
          <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >

              <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="4px">
            <QuriDropDown CodeId="projlist" @bind-Value=srtype Change=OnLoadWrk />
              </RadzenStack>

              <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
                  <RadzenButton Click="@OnLoadWrk" Text="Search" />
              </RadzenStack>

          </RadzenStack>
      </RadzenCard>


      <RadzenSteps >
          <Steps>
              <RadzenStepsItem Text="요건정의"></RadzenStepsItem>
              <RadzenStepsItem Text="시스템" Disabled=true></RadzenStepsItem>
              <RadzenStepsItem Text="통합테스트" Disabled=true></RadzenStepsItem>
              <RadzenStepsItem Text="완료" Disabled=true></RadzenStepsItem>
          </Steps>
      </RadzenSteps>






      <RadzenRow Style="--rz-text-h2-line-height: 1; --rz-text-h2-font-weight: 200;">
          <RadzenColumn Size="12" SizeMD="12" SizeXL="12">
              <RadzenRow>


                  <RadzenColumn Size="12" SizeMD="4" SizeXL="4">
                      <RadzenCard Variant="Variant.Outlined" Style="height: 100%;">
                          <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
                              <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
                                  <RadzenText TextStyle="TextStyle.H6">Project</RadzenText>
                                  <RadzenText TextStyle="TextStyle.H2" class="rz-color-info rz-m-0">@closeRatioPercentage  <span class="badge text-bg-secondary fs-6">%</span></RadzenText>
                              </RadzenStack>
                              <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" @bind-Value=@closeRatioPercentage ShowValue=true />
                              <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Info" @bind-Value=@closeRatioPercentage ShowValue=true />
                          </RadzenStack>
                      </RadzenCard>
                  </RadzenColumn>



                  <RadzenColumn Size="12" SizeMD="4" SizeXL="4">
                      <RadzenCard Variant="Variant.Outlined" Style="height: 100%;">
                          <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
                              <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">

                                  <RadzenStack Orientation="Orientation.Vertical">
                                      <RadzenText TextStyle="TextStyle.H6">Front Source Commet</RadzenText>
                                      <RadzenText TextStyle="TextStyle.Body1">@_compFileCount  / @_totalFileCount</RadzenText>
                                  </RadzenStack>

                                  <RadzenText TextStyle="TextStyle.H2" class="rz-color-info rz-m-0">@commentRatioPercentage  <span class="badge text-bg-secondary fs-6">%</span></RadzenText>
                              </RadzenStack>
                              <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Info" @bind-Value=@commentRatioPercentage ShowValue=true />
                          </RadzenStack>
                      </RadzenCard>

                  </RadzenColumn>



            <RadzenColumn Size="12" SizeMD="3" SizeXL="2">

              <ProcessCard 
                Title="WBS" 
                ProcName="sp_proj_wbs_moniter" 
                DbNick=@db_nick 
                CallType="db"
                Project="@srtype"
                TotalKey="total_task_count"
                PlanKey="planned_until_now_count"
                CurrentKey="completed_task_count" />

            </RadzenColumn>


            <RadzenColumn Size="12" SizeMD="3" SizeXL="2">

              <ProcessCard 
                Title="WBS pct" 
                ProcName="sp_proj_wbs_moniter" 
                DbNick=@db_nick 
                CallType="db"
                Project="@srtype"
                TotalKey="total_task_count"
                PlanKey="planneds_until_now_count"
                CurrentKey="comp_and_ing_cnt" />

            </RadzenColumn>






                  @if (@ProcInfoData != null) {

                <RadzenColumn Size="12" SizeMD="4" SizeXL="4">


                    <RadzenCard Variant="Variant.Outlined" Style="height: 100%;">
                        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenText TextStyle="TextStyle.H6">Procedures</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@ProcInfoData.Data[0]["all_cnt"]    </RadzenText>
                                </RadzenStack>
                                <RadzenText TextStyle="TextStyle.H2" class="rz-color-info rz-m-0"> @ProcInfoData.Data[0]["sp_cnt"] <span class=" badge bg-primary">proc</span></RadzenText>
                                <RadzenText TextStyle="TextStyle.H2" class="rz-color-info rz-m-0"> @ProcInfoData.Data[0]["fn_cnt"]<span class=" badge bg-primary">fn</span></RadzenText>
                                <RadzenText TextStyle="TextStyle.H2" class="rz-color-info rz-m-0"> @ProcInfoData.Data[0]["etc_cnt"]<span class=" badge bg-primary">etc</span></RadzenText>
                            </RadzenStack>



                        </RadzenStack>
                    </RadzenCard>


                </RadzenColumn>




      }

           

            <RadzenColumn Size="12" SizeMD="3" SizeXL="2">

        <ProcessCard Title="Table" ProcName="tableMonitoring" DbNick=@db_nick CallType="js" TotalKey="all_cnt" CurrentKey="comment_cnt" />

            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="3" SizeXL="2">

        <ProcessCard Title="Column" ProcName="columnsMonitoring" DbNick=@db_nick CallType="js" TotalKey="all_cnt" CurrentKey="comment_cnt" />

            </RadzenColumn>





        </RadzenRow>
    </RadzenColumn>
</RadzenRow>




<RadzenRow Style="margin-top:10px;">

    @foreach (var user in userData) {

        <RadzenColumn Size="12" SizeMD="3" SizeXL="3">





            <RadzenCard Style="width: 100%;">
                <RadzenRow>
                    <RadzenColumn Size="8" class="rz-text-truncate">
                        <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@GetUserValue(@user.Key, "user_name")" class="rz-me-1" />
                        <b>@(@user.Key)</b>
                    </RadzenColumn>
                    <RadzenColumn Size="4" class="rz-text-align-end">
                        <RadzenBadge BadgeStyle="BadgeStyle.Success" Text=@(Math.Round(@user.Value["author"] * 100 / @_totalFileCount, 1).ToString()) />
                    </RadzenColumn>
                </RadzenRow>
                <hr style="border: none; background-color: var(--rz-text-disabled-color); height: 1px; margin: 1rem 0;" />
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenImage Path="@GetUserValue(@user.Key, "user_photo")"
                    Style="width: 80px; height: 80px; border-radius: 50%" AlternateText="@(@user.Key)" />
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.H6" class="rz-mb-0">file : @(@user.Value["author"])</RadzenText>
                        <RadzenText TextStyle="TextStyle.H6">wbs : @(@user.Value["dev_user"])</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2">@(@user.Key), @(@user.Key)</RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>








        </RadzenColumn>



    }

</RadzenRow>

@code {

  double closeRatioPercentage{get;set;}= 90;

  double commentRatioPercentage { get; set; } = 0;

  double _totalFileCount { get; set; } = 0;

  double _planFileCount { get; set; } = 0;

  double _compFileCount { get; set; } = 0;

  public CommonCode? srtype { get; set; }
  Dictionary<string, string> db_dic = new Dictionary<string, string>();
  public string db_nick { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
      if (firstRender) {
          await OnLoadWrk();
      }
  }

  //source data
  public ResultInfo<Dictionary<string, object>>? Data { get; set; }


  protected async Task OnLoadWrk() {

    if (string.IsNullOrEmpty(srtype?.Code)) return;
    db_nick = null;
    ProcInfoData = null;
    db_dic.Clear();
    userData.Clear();

    Data = await MdCont<Dictionary<string, object>>("md_blazor_scan", new Dictionary<string, string>() { 
      { "prj_rid",  srtype?.Code ?? "3" }
    });


    user_data = await DbCont<Dictionary<string, string>>("sp_dev_user_exec", new Dictionary<string,string>(){{"prj_rid",srtype?.Code}} );

    var dataList = Data.Data;

    _totalFileCount = dataList.Count;
    int emptyCredtCount = dataList.Count(d => d.ContainsKey("credt") && string.IsNullOrEmpty(d["credt"]?.ToString()));
    _compFileCount = dataList.Count(d => d.ContainsKey("credt") && !string.IsNullOrEmpty(d["credt"]?.ToString()));

    commentRatioPercentage = Math.Round((_compFileCount * 100) / _totalFileCount, 1);

    CountUsersWithDevEdt(dataList, "author");

    // wbs
    var wbsData = await DbCont<Dictionary<string, object>>("sp_proj_wbs_exec", new Dictionary<string, string>() {
      { "prj_rid", srtype?.Code ?? "3"  }
    });

    dataList = wbsData.Data;

    emptyCredtCount = dataList.Count(d => d.ContainsKey("dev_edt") && string.IsNullOrEmpty(d["dev_edt"]?.ToString()));
      
    CountUsersWithDevEdt(dataList, "dev_user");

    // dblist
    var db4proj = await GetCommon("projdb", srtype?.Code);

    //   Dictionary<string, string> dic = new Dictionary<string, string>() {
    // {"db",db4proj[0]      .Others["db_type"]},
    // {"dbnick",db4proj[0].Others["db_nick"]},
    // {"schema",db4proj[0].Others["db_schema"]},
    // {"stp", "columnsMonitoring"},

    // };

    db_dic["db"]=db4proj[0].Others["db_type"];
    db_dic["dbnick"] = db4proj[0].Others["db_nick"];
    db_dic["schema"] = db4proj[0].Others["db_schema"];
    //db_dic["stp"] = "columnsMonitoring";
    db_nick = db4proj[0].Others["db_nick"];

    ProcInfoData = await JsCont<Dictionary<string, object>>("procMonitoring", db_dic);


  }



  double GetPercent(object p, object c){

      double total = double.Parse(p.ToString());
      double opppp = double.Parse(c.ToString());

      double r = Math.Round((total <= 0) ? 0 : ((opppp * 100) / total), 1);

      return r;
  }




  public ResultInfo<Dictionary<string, object>>? ProcInfoData { get; set; }




  Dictionary<string, Dictionary<string, int>> userData { get; set; } = new Dictionary<string, Dictionary<string, int>>();


  ResultInfo<Dictionary<string, string>> user_data{ get; set; }


  public string GetUserValue(string user, string key){
    string result = string.Empty;
    if( user_data != null && user_data.Data != null ){

    
      foreach( var udt in user_data.Data ){
        if( udt.GetValue("user_id") == user ){                          
          result = udt.GetValue(key);
          break;
        }
      }
    }
    return result;
  }



  public void CountUsersWithDevEdt(List<Dictionary<string, object>> dataList, string user_key) {

      foreach (var dict in dataList) {
          if (dict.ContainsKey(user_key) && dict[user_key] != null) {
              string user = dict[user_key].ToString();
              if (!string.IsNullOrEmpty(user)) {
                  if (!userData.ContainsKey(user)) {
                      userData[user] = new Dictionary<string, int>();
                  }

                  if (!userData[user].ContainsKey(user_key)) {
                      userData[user][user_key] = 0;
                  }

                  userData[user][user_key]++;

                  // if (dict.ContainsKey("dev_edt") && string.IsNullOrEmpty(dict["dev_edt"]?.ToString())) {
                  //   userCounts[user].EmptyDevEdtCount++;
                  // }
              }
          }
      }

  }

}
