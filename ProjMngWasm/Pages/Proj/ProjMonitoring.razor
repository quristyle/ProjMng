@page "/proj-monitoring";
@{
/* description : 프로젝트 상태 정보를 제공
* title : 모니터링
* sort : 30
* credt : 2021-09-01
* author : quristyle
*/
}

@inherits PageBaseComponent

<RadzenCard >
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >
        
    <QuriSearchs AllLoadComplete=OnLoadWrk >
      <QuriDropDown CodeId="projlist" @bind-Value=srtype Change=OnLoadWrk />
    </QuriSearchs>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
     <RadzenButton Click="@OnLoadWrk" Text="Search" />
    </RadzenStack>

  </RadzenStack>
</RadzenCard>

<RadzenRow Style="--rz-text-h2-line-height: 1; --rz-text-h2-font-weight: 200;">
  <RadzenColumn Size="12" SizeMD="12" SizeXL="12">
    
    @if(pmInfo != null ){

    @* 프로젝트 total *@
    
    <RadzenCardGroup >

      
      <RadzenCard >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">

        <RadzenCard Variant="Variant.Outlined" Style="height: 100%;">
          <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
              <RadzenText TextStyle="TextStyle.H6">Project</RadzenText>
              <RadzenText TextStyle="TextStyle.H2" class="rz-color-info rz-m-0">@pmInfo.ProjectTotalPercentage  <span class="badge text-bg-secondary fs-6">%</span></RadzenText>
            </RadzenStack>
            <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" @bind-Value=@pmInfo.ProjectPlanPercentage  ShowValue=true />
            <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Info" @bind-Value=@pmInfo.ProjectCompPercentage  ShowValue=true />
          </RadzenStack>
        </RadzenCard>
        
        </RadzenStack>
      </RadzenCard>
        
      <RadzenCard >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
          
          <ProcessCard 
            Title="WBS" 
            ProcName="sp_proj_wbs_moniter" 
            CallType="db"
            Project="@srtype"
            TotalKey="total_task_count"
            PlanKey="planned_until_now_count"
            CurrentKey="completed_task_count" />

        </RadzenStack>
      </RadzenCard>


      
      <RadzenCard >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
          
          <ProcessCard 
            Title="WBS pct" 
            ProcName="sp_proj_wbs_moniter" 
            CallType="db"
            Project="@srtype"
            TotalKey="total_task_count"
            PlanKey="planneds_until_now_count"
            CurrentKey="comp_and_ing_cnt" />

        </RadzenStack>
      </RadzenCard>





    <RadzenCardGroup >
        @if( user_data != null && user_data.Data.Count > 0){
          @foreach (var user in user_data.Data) {

           
                
      <RadzenCard >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
          



                      <RadzenRow>
                          <RadzenColumn Size="9" class="rz-text-truncate">
                            <RadzenStack  Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
                              <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@user.GetValue("user_name")" class="rz-me-1" />
                              <RadzenText >@(@user.GetValue("user_id"))</RadzenText>
                            </RadzenStack> 
                          </RadzenColumn>
                          <RadzenColumn Size="3" class="rz-text-align-end">
                              <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="..%" />
                          </RadzenColumn>
                      </RadzenRow>
                      <hr style="border: none; background-color: var(--rz-text-disabled-color); height: 1px; margin-top: 1rem;" />
                      <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" >
                          <RadzenImage 
                            Path="@user.GetValue("user_photo")"
                            Style="width: 40px; height: 40px; border-radius: 50%" 
                            AlternateText="@user.GetValue("user_name")" />
                          <RadzenStack Gap="0">
                          </RadzenStack>
                      </RadzenStack>



        </RadzenStack>
      </RadzenCard>






          }

          }

    </RadzenCardGroup >








      
    </RadzenCardGroup>



    

    
    @if( pmInfo.DbList != null && pmInfo.DbList.Count > 0){
      foreach(var w in pmInfo.DbList ){
        
    @* db information *@
    <RadzenCardGroup >
      
      
      

      <RadzenCard Variant=Variant.Filled >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
          
        <RadzenText TextStyle="TextStyle.H5" >@w.Db_nick</RadzenText>
         
          <ProcessDispCard 
            Title="Procedures" 
            ProcName="procMonitoring" 
            DbNick=@w.Db_nick 
            CallType="js" 
            TotalKey="all_cnt" CurrentKey="sp_cnt" PlanKey="fn_cnt" EtcKey="etc_cnt"
            CurrentBedge="sp" PlanBedge="fn" EtcBedge="etc"
             />


        </RadzenStack>
      </RadzenCard>



      <RadzenCard Variant=Variant.Filled >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
          
         
          <ProcessCard 
            Title="Tables" 
            ProcName="tableMonitoring" 
            DbNick=@w.Db_nick 
            CallType="js" TotalKey="all_cnt" CurrentKey="comment_cnt" />


        </RadzenStack>
      </RadzenCard>

      
      <RadzenCard Variant=Variant.Filled >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
          
          <ProcessCard 
            Title="Columns" 
            ProcName="columnsMonitoring" 
            DbNick=@w.Db_nick
            CallType="js" TotalKey="all_cnt" CurrentKey="comment_cnt" />


        </RadzenStack>
      </RadzenCard>

      



    </RadzenCardGroup>


    
      }
    }
    

    @if(pmInfo.WorkList != null && pmInfo.WorkList.Count > 0){
      
    @* source *@
    <RadzenCardGroup >


    @foreach(var w in pmInfo.WorkList ){


      
      
      <RadzenCard >
        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
          
            <RadzenCard Variant="Variant.Outlined" Style="height: 100%;">
                <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">

                        <RadzenStack Orientation="Orientation.Vertical">
                            <RadzenText TextStyle="TextStyle.H6">@w.Src_nick Commet</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">@w.FrontCompFileCount  / @w.FrontTotalFileCount</RadzenText>
                        </RadzenStack>

                        <RadzenText TextStyle="TextStyle.H2" class="rz-color-info rz-m-0">@w.FrontTotalPercentage  <span class="badge text-bg-secondary fs-6">%</span></RadzenText>
                    </RadzenStack>
                    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Info" @bind-Value=@w.FrontTotalPercentage ShowValue=true />
                </RadzenStack>
            </RadzenCard>

        </RadzenStack>
      </RadzenCard>

      



      }

      
    </RadzenCardGroup>



    }

    
    }

  </RadzenColumn>
</RadzenRow>

@code {

  ProjectMonitoringInfo pmInfo {get;set;} 

  public CommonCode? srtype { get; set; }
  Dictionary<string, string> db_dic = new Dictionary<string, string>();

  Dictionary<string, Dictionary<string, int>> userData { get; set; } = new Dictionary<string, Dictionary<string, int>>();
 
  ResultInfo<Dictionary<string, string>> user_data{ get; set; }
 
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
        await OnLoadWrk();
    }
  }

  protected async Task OnLoadWrk() {
    
    if (string.IsNullOrEmpty(srtype?.Code)) return;
    db_dic.Clear();
    userData.Clear();

    pmInfo = new();
    
    user_data = await DbCont<Dictionary<string, string>>("sp_dev_user_exec", new Dictionary<string,string>(){{"prj_rid",srtype?.Code}} );

    var srcList = await DbCont<Dictionary<string, string>>("sp_dev_srcinfo_exec", new Dictionary<string, string>() { 
      { "prj_rid",  srtype?.Code }
    });

    List<WorkInfo> srcinfoList = srcList.Data.ConvertStringDictionaryList<WorkInfo>();


    //sp_projdblist

    
    var dbList = await DbCont<DbInfo>("sp_projdblist", new Dictionary<string, string>() { 
      { "proj_rid",  srtype?.Code }
    });
    pmInfo.DbList = dbList.Data;


    foreach( var si in srcinfoList){
      var src_scan = await MdCont<Dictionary<string, string>>("md_blazor_scan", new Dictionary<string, string>() { 
        { "prj_rid",  srtype?.Code }, { "src_rid",  si.Src_rid }
      });

      si.Src_scan = src_scan.Data;

      si.FrontTotalFileCount = si.Src_scan.Count;
      int emptyCredtCount = si.Src_scan.Count(d => d.ContainsKey("credt") && string.IsNullOrEmpty(d["credt"]?.ToString()));
      si.FrontCompFileCount = si.Src_scan.Count(d => d.ContainsKey("credt") && !string.IsNullOrEmpty(d["credt"]?.ToString()));

      si.FrontTotalPercentage = Math.Round((si.FrontCompFileCount * 100) / si.FrontTotalFileCount, 1);

      
      // wbs
      var wbsData = await DbCont<Dictionary<string, object>>("sp_proj_wbs_exec", new Dictionary<string, string>() {
        { "prj_rid", srtype?.Code  }, { "src_rid",  si.Src_rid }
      });

      emptyCredtCount =  wbsData.Data.Count(d => d.ContainsKey("dev_edt") && string.IsNullOrEmpty(d["dev_edt"]?.ToString()));

    }

    
    pmInfo.WorkList = srcinfoList;

    //CountUsersWithDevEdt(dataList, "author");

      
    //CountUsersWithDevEdt(dataList, "dev_user");


  }

  double GetPercent(object p, object c){

      double total = double.Parse(p.ToString());
      double opppp = double.Parse(c.ToString());

      double r = Math.Round((total <= 0) ? 0 : ((opppp * 100) / total), 1);

      return r;
  }

  public string GetUserValue(string user, string key){
    string result = string.Empty;
    if( user_data != null && user_data.Data != null ){

      foreach( var udt in user_data.Data ){
        if( udt.GetValue("user_id") == user ){                          
          result = udt.GetValue(key);
          break;
        }
      }

    }
    return result;
  }

  // 사용자별 user_key 의 해당 숫자를 구하기 위함이다.
  public void CountUsersWithDevEdt(List<Dictionary<string, object>> dataList, string user_key) {

      foreach (var dict in dataList) {
          if (dict.ContainsKey(user_key) && dict[user_key] != null) {
              string user = dict[user_key].ToString();
              if (!string.IsNullOrEmpty(user)) {
                  if (!userData.ContainsKey(user)) {
                      userData[user] = new Dictionary<string, int>();
                  }

                  if (!userData[user].ContainsKey(user_key)) {
                      userData[user][user_key] = 0;
                  }

                  userData[user][user_key]++;

                  // if (dict.ContainsKey("dev_edt") && string.IsNullOrEmpty(dict["dev_edt"]?.ToString())) {
                  //   userCounts[user].EmptyDevEdtCount++;
                  // }
              }
          }
      }

  }



  public class ProjectMonitoringInfo{
    public double ProjectTotalPercentage{get;set;} = 0;
    public double ProjectPlanPercentage{get;set;} = 0;
    public double ProjectCompPercentage{get;set;} = 0;
    public List<WorkInfo> WorkList{get;set;}

    public List<DbInfo> DbList{get;set;}

  }

  
  public class WorkInfo : SrcInfo{
    public string Title{get;set;}
    public double FrontTotalPercentage {get;set;} 
    public double FrontTotalFileCount {get;set;} 
    public double FrontCompFileCount {get;set;} 
    public double FrontCompPercentage {get;set;} 

    public List<Dictionary<string, string>> Src_scan{get;set;} 

    public string All_cnt {get;set;} 
    public string Sp_cnt {get;set;} 
    public string Fn_cnt {get;set;} 
    public string Etc_cnt {get;set;} 

    public string DbNick {get;set;} 

  }


}
