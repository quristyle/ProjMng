@inject DialogService DialogService

@inherits PageBaseComponent
<RadzenTemplateForm TItem="WbsInfo" Data="@model" Submit=@OnSubmit>
  <RadzenStack Gap="1rem">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
      <RadzenLabel Text="Title" Style="width: 4rem;" />
      <RadzenTextBox @bind-Value="@model.proc_nm" Name="Text" Style="width: 20rem;" />
      <RadzenRequiredValidator Component="Text" Text="Title is required" />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
      <RadzenLabel Text="Start" Style="width: 4rem;" />
      <RadzenDatePicker @bind-Value="@model.plan_sdt" Name="Start" ShowTime="true" Style="width: 12rem;"  DateFormat="yyyy-MM-dd" >
        <FooterTemplate>
            <RadzenButton Click=@(args => model.plan_sdt = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
        </FooterTemplate>
    </RadzenDatePicker>
      <RadzenRequiredValidator Component="Start" Text="Start is required" />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
      <RadzenLabel Text="End" Style="width: 4rem;" />
      <RadzenDatePicker Name="End" @bind-Value="@model.plan_edt" ShowTime="true" Style="width: 12rem;" DateFormat="yyyy-MM-dd"  >
        <FooterTemplate>
            <RadzenButton Click=@(args => model.plan_edt = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
        </FooterTemplate>
    </RadzenDatePicker>
      <RadzenRequiredValidator Component="End" Text="End is required" />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
      <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
    </RadzenStack>
  </RadzenStack>
</RadzenTemplateForm>
@code {
  [Parameter]  public DateTime? Start { get; set; }

  [Parameter]  public DateTime? End { get; set; }

  [Parameter]  public string PrjRid { get; set; }

  WbsInfo model = new WbsInfo();

  protected override void OnParametersSet() {
    model.plan_sdt = Start;
    model.plan_edt = End;
  }

async Task OnSubmit(WbsInfo model) {

  model.prj_rid = PrjRid;
  model.wbs_state = "READY";

    Dictionary<string, string> dic = model.ToDictionary();

    var rst = await DbSave<Dictionary<string, object>>("sp_proj_wbs_exec", dic);
    if( rst.Data.Count > 0){
      model.wbs_id = rst.Data[0]["wbs_id"].ToString();
    }
    DialogService.Close(model);
  }
}