@page "/projmng2";

@inherits BaseComponent

<RadzenCard class="rz-my-6">
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="4px">
      <QuriDropDown TValue="string" CodeId="projlist" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
      <RadzenButton Click="@OnLoadWrk" Text="Search" />
      <RadzenButton Click="@OnSave" Text="Save" />
    </RadzenStack>

  </RadzenStack>
</RadzenCard>

<RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal">
  <RadzenColumn Size="12">

    <RadzenDataGrid Data="@data" Style="height: 65vh;"
                    @ref="ordersGrid"
                    TItem="IDictionary<string, object>"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.And"
                    AllowFiltering="true"
                    AllowColumnResize="true"
                    FilterMode="FilterMode.Simple"
                    SelectionMode="DataGridSelectionMode.Single"
                    AllowPaging="false"
                    AllowSorting="true"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true">
      <Columns>

        @foreach (var column in cols) {
          <RadzenDataGridColumn @key=@column.Key Title="@column.Key" Type="column.Value"
                                Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">

            <EditTemplate Context="order">
              <RadzenTextBox Change="@(args => Update(@column.Key, args, order))" Value=@(order.TryGetValue(@column.Key, out object k)?k.ToString():"") Name="@column.Key" aria-label="Enter {column.Key}" />
            </EditTemplate>
            <Template>
              @context[@column.Key]
            </Template>
          </RadzenDataGridColumn>
        }

        <RadzenDataGridColumn Context="IDictionary<string, object>" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
          <Template Context="order">
            <RadzenButton Icon="add_circle" Click="@(() => InsertAfterRow(order))" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />

            <RadzenButton Icon="edit" Click="@(args => EditRow(order))" @onclick:stopPropagation="true" />
          </Template>
          <EditTemplate Context="order">
            <RadzenButton Icon="check" Click="@((args) => SaveRow(order))" aria-label="Save" />
            <RadzenButton Icon="close" Click="@((args) => CancelEdit(order))" aria-label="Cancel" />
          </EditTemplate>
        </RadzenDataGridColumn>

      </Columns>
    </RadzenDataGrid>

  </RadzenColumn>
</RadzenRow>

@code {

  public string srtype { get; set; }
  RadzenDataGrid<IDictionary<string, object>> ordersGrid;

  IEnumerable<IDictionary<string, object>> orders;


  List<IDictionary<string, object>> ordersToInsert = new List<IDictionary<string, object>>();
  List<IDictionary<string, object>> ordersToUpdate = new List<IDictionary<string, object>>();


  DataGridEditMode editMode = DataGridEditMode.Single;

  public IDictionary<string, Type> cols { get; set; } = new Dictionary<string, Type>();
  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    await OnLoadWrk();
  }


  public IEnumerable<IDictionary<string, object>> data { get; set; }



  void Reset() {
    ordersToInsert.Clear();
    ordersToUpdate.Clear();
  }

  void Reset(IDictionary<string, object> order) {
    ordersToInsert.Remove(order);
    ordersToUpdate.Remove(order);
  }


  protected async Task OnLoadWrk() {
    cols.Clear();
    var rd = await JsiniService.GetList<IDictionary<string, object>>(new Dictionary<string, string>() { { "stp", "sp_projdblist" } });
    data = rd.Data;
    if (data != null && data.Any()) {
      foreach (var dd in data) {
        foreach (var d in dd) {
          cols.Add(d.Key, typeof(string));
        }
        break;
      }
    }

  }


  async Task Update(string key, string args, IDictionary<string, object> order) {


    order[key] = args;
    string adfadf = "";
    //editorFocused = false;

    //if (ordersToUpdate.Any()) {
    //  await grid.UpdateRow(ordersToUpdate.First());
    //}
  }










  protected async Task OnSave() {
    //cols.Clear();
    //data2 = await UmsService.GetList("p_work", new Dictionary<string, object>() { { "SRTP", srtype }, { "ID", selectedItems?[0]["a"] }, { "EDT", DateTime.Now.ToString("yyyy-MM-dd") } });
  }



  async Task EditRow(IDictionary<string, object> order) {
    if (!ordersGrid.IsValid) return;

    if (editMode == DataGridEditMode.Single) {
      Reset();
    }

    ordersToUpdate.Add(order);
    await ordersGrid.EditRow(order);
  }


  void CancelEdit(IDictionary<string, object> order) {
    Reset(order);

    ordersGrid.CancelEditRow(order);

    //var orderEntry = dbContext.Entry(order);
    //if (orderEntry.State == EntityState.Modified) {
    //  orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
    //  orderEntry.State = EntityState.Unchanged;
    //}
  }



  Dictionary<string, object> CreateData() {

    var order = new Dictionary<string, object>();

    foreach (var c in cols) {
      order.Add(c.Key, "");
    }
    return order;
  }


  async Task InsertRow() {
    if (!ordersGrid.IsValid) return;

    if (editMode == DataGridEditMode.Single) {
      Reset();
    }

    var order = CreateData();



    ordersToInsert.Add(order);
    await ordersGrid.InsertRow(order);
  }

  async Task InsertAfterRow(IDictionary<string, object> row) {
    if (!ordersGrid.IsValid) return;

    if (editMode == DataGridEditMode.Single) {
      Reset();
    }

    var order = CreateData();
    ordersToInsert.Add(order);
    await ordersGrid.InsertAfterRow(order, row);
  }

  void OnCreateRow(IDictionary<string, object> order) {
    //dbContext.Add(order);

    //dbContext.SaveChanges();

    ordersToInsert.Remove(order);
  }



  async Task SaveRow(IDictionary<string, object> order) {
    await ordersGrid.UpdateRow(order);
  }














}
