@page "/menumng";
@{ 
    /* description : 메뉴관리
  * title : 메뉴관리
  * sort : 2
  * credt : 2025-06-15
  * author : quristyle
  */
      }

@inherits PageBaseComponent

 

          <RadzenSplitter Orientation="Orientation.Horizontal" class="context-body-row" style=" border: 1px solid rgba(0,0,0,.08); ">

            <!-- 왼쪽 -->
            <RadzenSplitterPane Size="50%" Min="10%" Max="90%">

              
                <RadzenTextBox 
                    AutoCompleteType="AutoCompleteType.Off" 
                    placeholder="Find component ..." type="search" @oninput="@Filter" 
                    style="width:100%" class="rz-search-input" aria-label="find" />


                    <RadzenTree Style="height:calc(100% - 200px);width:100%;"
                    
                     ItemContextMenu="ItemContextMenu"
                    
                    >
                      
                      <RadzenTree Data=@Data Style="height: 100%" ItemContextMenu="ItemContextMenu">
                        <RadzenTreeLevel TextProperty="mnu_nm" ChildrenProperty="children"
                                         Expanded=@(i => true)
                                        HasChildren=@(i => ((MenuInfo)i).children?.Any() == true)
                                         
                                         />







                                             @* HasChildren=@(i => ((MenuInfo)i).Children?.Any() == true) *@






                    </RadzenTree>
        </RadzenTree>













            </RadzenSplitterPane>
            <!-- 오른쪽 -->
            <RadzenSplitterPane Size="50%" Min="10%" Max="90%">





            </RadzenSplitterPane>
          </RadzenSplitter>

    

@code {


  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      OnLoadWrk();
    }
  }

  public List<MenuInfo> Data { get; set; }

  protected async Task OnLoadWrk() {
    var rdata = await DbCont<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
    { "srch_type",  "main" }
    });

    MenuInfo mi = new MenuInfo();
    mi.mnu_nm = "ROOT";
    mi.mnu_id= "ROOT";
    rdata.Data.Add(mi);

    Data = rdata.Data;
    StateHasChanged();
  }


  void Filter(ChangeEventArgs args)    {
    var term = $"{args.Value}";

    //examples = string.IsNullOrEmpty(term) ? ExampleService.Examples : ExampleService.Filter(term);
  }


  async Task ItemContextMenu(TreeItemContextMenuEventArgs args)    { 
    ContextMenuService.Open(args,
        new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "하위 메뉴 추가", Value = 1, Icon = "home" },
                new ContextMenuItem(){ Text = "메뉴 삭제", Value = 2, Icon = "search" }
                },
        async (e) =>        {

          if( (int)e.Value == 1)          {

            MenuInfo ownerMenu =(MenuInfo)args.Value;
            if( ownerMenu.children == null ){
              ownerMenu.children = new List<MenuInfo>();
            }
            else{

            }

            
            
            var rdata = await DbSave<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
            { "mnu_nm",  "new menu" },
            {"owner_id", ownerMenu.mnu_id}
            });

           MenuInfo mi =  rdata.Data[0];

            ((MenuInfo)args.Value).children.Add(new MenuInfo() { mnu_nm= mi.mnu_nm , mnu_id = mi.mnu_id  });




          }
          else          {

              string aaaa = "";
              
           // ((MenuInfo)args.Value).Children.Add(new MenuInfo() { mnu_nm="new menu"});
            
          }
          ContextMenuService.Close();
          //console.Log($"Menu item with Value={e.Value} clicked. Tree item: {args.Text}, EmployeeID: {((Employee)args.Value).EmployeeID}");
          StateHasChanged();
            }
         );
    }


}
