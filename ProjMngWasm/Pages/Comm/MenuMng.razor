@page "/menumng";
@{ 
    /* description : 메뉴관리
  * title : 메뉴관리
  * sort : 2
  * credt : 2025-06-15
  * author : quristyle
  */
      }

@inherits PageBaseComponent


      <RadzenCard >
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >
          
          <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="4px">
            <RadzenTextBox  />
          </RadzenStack>

          <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
            <RadzenButton Click="@OnLoadWrk" Text="Search" />
            <RadzenButton Click=@OnSaveWrk Text="Save" />
          </RadzenStack>

        </RadzenStack>
      </RadzenCard>

 

          <RadzenSplitter Orientation="Orientation.Horizontal" class="context-body-row" style=" border: 1px solid rgba(0,0,0,.08); ">

            <!-- 왼쪽 -->
            <RadzenSplitterPane Size="50%" Min="10%" Max="90%">

              
                <RadzenTextBox 
                    AutoCompleteType="AutoCompleteType.Off" 
                    placeholder="Find component ..." type="search" @oninput="@Filter" 
                    style="width:100%" class="rz-search-input" aria-label="find" />


                      
                      <RadzenTree 
                        Data=@Data 

                        
                        @bind-Value="SelectMenuObj"

                        Style="height:calc(100% - 37px);width:100%;" 
                        
                        ItemRender="ItemRender"

                      ItemContextMenu="ItemContextMenu"
                      
                      
                      >
                        <RadzenTreeLevel TextProperty="mnu_nm" ChildrenProperty="Children"
                                       Expanded=@(i => true)
                                        HasChildren=@(i => ((MenuInfo)i).Children?.Any() == true)
                                         
                                         />



  @* Expanded=@(i => true) *@




                    </RadzenTree>











            </RadzenSplitterPane>
            <!-- 오른쪽 -->
            <RadzenSplitterPane Size="50%" Min="10%" Max="90%">

              
              <div class="rz-p-0 rz-p-md-12">

                  <RadzenRow Gap="1rem">
                      <RadzenColumn Size="12" SizeSM="6">
                          <RadzenStack>
                              <RadzenFormField Text="mnu_id" Variant="@variant">
                                  <RadzenTextBox @bind-Value=@SelectMenu.mnu_id />
                              </RadzenFormField>
                              <RadzenFormField Text="mnu_cd" Variant="@variant">
                                  <RadzenTextBox @bind-Value=@SelectMenu.mnu_cd />
                              </RadzenFormField>
                              <RadzenFormField Text="mnu_nm" Variant="@variant">
                                  <RadzenTextBox @bind-Value="@SelectMenu.mnu_nm" />
                              </RadzenFormField>
                              <RadzenFormField Text="pgm_id" Variant="@variant">
                                  <RadzenTextBox @bind-Value=@SelectMenu.pgm_id />
                              </RadzenFormField>
                              <RadzenFormField Text="isChanged" Variant="@variant">
                                  <RadzenCheckBox @bind-Value=@SelectMenu.isChanged />
                              </RadzenFormField>
                              <RadzenFormField Text="owner_id" Variant="@variant">
                                  <RadzenTextBox @bind-Value=@SelectMenu.owner_id />
                              </RadzenFormField>
                              <RadzenFormField Text="사용여부" Variant="@variant">
                                  <RadzenRadioButtonList @bind-Value=@SelectMenu.use_yn class="rz-m-4 rz-mt-8">
                                      <Items>
                                          <RadzenRadioButtonListItem Text="사용" Value="@("Y")" />
                                          <RadzenRadioButtonListItem Text="비사용" Value="@("N")" />
                                      </Items>
                                  </RadzenRadioButtonList>
                              </RadzenFormField>
                          </RadzenStack>
                      </RadzenColumn>

                      <RadzenColumn Size="12" SizeSM="6">
                          <RadzenStack>
                              <RadzenFormField Text="url" Variant="@variant">
                                  <RadzenTextBox @bind-Value=@SelectMenu.mnu_url />
                              </RadzenFormField>
                              <RadzenFormField Text="RadzenTextArea" Variant="@variant">
                                  <RadzenTextArea  Rows="4" />
                              </RadzenFormField>
                          </RadzenStack>
                      </RadzenColumn>
                  </RadzenRow>
              </div>



            </RadzenSplitterPane>
          </RadzenSplitter>

    

@code {

  Variant variant = Variant.Outlined;


    protected override async Task OnAfterRenderAsync(bool firstRender) {
      if (firstRender) {
          OnLoadWrk();
      }
    }

    
    public object _selectMenuObj{get;set;}
    public object SelectMenuObj{
      get{
        return _selectMenuObj;
    }
    set{
      _selectMenuObj = value;
      SelectMenu = (MenuInfo)value;
    }}
    public MenuInfo SelectMenu{get;set;} = new MenuInfo();

    public List<MenuInfo> Source{ get; set; }
    public List<MenuInfo> Data { get; set; }

    protected async Task OnLoadWrk()    {
        var rdata = await DbCont<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
        { "srch_type",  "main" }
        });

        //rdata.Data.Add(new MenuInfo(){mnu_id="ROOT",mnu_cd="ROOT",mnu_nm="ROOT"});
        Source = rdata.Data;
       Data = MenuInfo.BuildMenuTree(rdata.Data);
       StateHasChanged();
    }

    
    protected async Task OnSaveWrk()    { // 변경된 여러 항목을 저장할 방법을 모색.

      foreach(var mn in Source){
        if(mn.isChanged){
          
            var rdata = await DbSave<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
            { "mnu_nm",  mn.mnu_nm },
            {"mnu_id", mn.mnu_id},
            {"owner_id", mn.owner_id},
            {"mnu_cd", mn.mnu_cd},
            {"mnu_url", mn.mnu_url},
            {"pgm_id", mn.pgm_id},
            });
            mn.isChanged = false; // 저장 후 변경 상태 초기화
        }
      }
      



      // return ;
      //   var rdata = await DbSave<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
      //   { "srch_type",  "main" }
      //   });

      //  Data = BuildMenuTree(rdata.Data);
      //  StateHasChanged();
    }


    /*

    public List<MenuInfo> BuildMenuTree(List<MenuInfo> source)    {
        var menuMap = new Dictionary<string, MenuInfo>();
        var rootMenus = new List<MenuInfo>();

        // 1. 모든 메뉴를 사전에 저장
        foreach (var menu in source)        {
            menuMap[menu.mnu_id] = menu;
        }

        // 2. 부모 메뉴와 자식 메뉴 연결
        foreach (var menu in source)        {
            if (menu.owner_id == "ROOT")            {
              rootMenus.Add(menu); // 최상위 메뉴
            }
            else if (menuMap.TryGetValue(menu.owner_id, out var parent))            {
              menu.OwnerMenu = parent;       // 부모 참조 설정
                
              if( parent.Children == null ){
                parent.Children = new List<MenuInfo>();
              }

              parent.Children.Add(menu);     // 자식 리스트에 추가
            }
        }
        
        foreach (var menu in source)        {
            menu.isChanged = false; // 초기화
        }

        return rootMenus;
    }

    */

  void Filter(ChangeEventArgs args)    {
    var term = $"{args.Value}";

    //examples = string.IsNullOrEmpty(term) ? ExampleService.Examples : ExampleService.Filter(term);
  }


  
    MenuInfo draggedItem;
  
    void ItemRender(TreeItemRenderEventArgs args)    { 
        var employee = (MenuInfo)args.Value;

        // Allow drag of all items except the root item.
        //if (employee.owner_id != "ROOT")        {
            args.Attributes.Add("title", "Drag item to reorder");
            args.Attributes.Add("style", "cursor:grab");
            args.Attributes.Add("draggable", "true");
            args.Attributes.Add("ondragstart", EventCallback.Factory.Create<DragEventArgs>(this, () =>             {
                if (draggedItem == null)                {
                  draggedItem = employee;
                }
            }));
        //}

        // Allow drop over any item including the root item.
        args.Attributes.Add("ondragover", "event.preventDefault()");
        args.Attributes.Add("ondrop", EventCallback.Factory.Create<DragEventArgs>(this, () =>        {
            if (draggedItem != null && draggedItem != employee &&
                draggedItem.owner_id != employee.mnu_id && 
                draggedItem.mnu_id != employee.owner_id)            {
                draggedItem.owner_id = employee.mnu_id;
                //dbContext.SaveChanges();

                Console.WriteLine($"Moved {draggedItem.mnu_nm} under {employee.mnu_nm}");

                
                if( draggedItem.OwnerMenu == null ){
                  Data.Remove(draggedItem);
                }
                else{
                draggedItem.OwnerMenu?.Children.Remove(draggedItem);

                }


                employee.Children.Add(draggedItem);

                draggedItem = null;
            }
        }));
    }





  async Task ItemContextMenu(TreeItemContextMenuEventArgs args)    { 
    ContextMenuService.Open(args,
        new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "선택위치 메뉴 추가", Value = 0, Icon = "home" },
                new ContextMenuItem(){ Text = "하위 메뉴 추가", Value = 1, Icon = "home" },
                new ContextMenuItem(){ Text = "파일에서 메뉴 읽기", Value = 4, Icon = "home" },
                new ContextMenuItem(){ Text = "메뉴 삭제", Value = 2, Icon = "search" },
                new ContextMenuItem(){ Text = "Root에 추가", Value = 3, Icon = "search" },
                },
        async (e) =>        {
          
            MenuInfo ownerMenu =(MenuInfo)args.Value;
            if( ownerMenu.Children == null ){
              ownerMenu.Children = new List<MenuInfo>();
            }

          if( (int)e.Value == 0)          {

            var rdata = await DbSave<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
            { "mnu_nm",  "same line new menu" },
            {"owner_id", ownerMenu.mnu_id}
            });

           MenuInfo mi =  rdata.Data[0];

            ownerMenu.Children.Add(new MenuInfo() { mnu_nm= mi.mnu_nm , mnu_id = mi.mnu_id  });

          }
          else if( (int)e.Value == 1)          {

            var rdata = await DbSave<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
            { "mnu_nm",  "new menu" },
            {"owner_id", ownerMenu.mnu_id}
            });

           MenuInfo mi =  rdata.Data[0];

            ownerMenu.Children.Add(new MenuInfo() { mnu_nm= mi.mnu_nm , mnu_id = mi.mnu_id  });

          }
          
          else if( (int)e.Value == 2)          {

            var rdata = await DbDelete<MenuInfo>("sp_dev_menu_exec", new Dictionary<string, string>() {
            { "mnu_nm",  "new menu" },
            {"mnu_id", ownerMenu.mnu_id}
            });

            ownerMenu.OwnerMenu.Children.Remove(ownerMenu);
            
                Source.Remove(ownerMenu);

          }
          
          else if( (int)e.Value == 3)          {


                    MenuInfo mmmi = new MenuInfo()                    {
                        mnu_nm = "new Menu",
                        owner_id = "ROOT"
                    };

                    Source.Add(mmmi);
                    Data.Add(mmmi);
           





          }
          
          else if( (int)e.Value == 4)          {



            
            var data = await MdCont<Dictionary<string, string>>("md_blazor_scan", new Dictionary<string, string>(){{"prj_rid","3"}});

            if (data != null && data.Data != null) {


              foreach( var d in data.Data){
            

                if (!Source.Any(x => x.pgm_id == d["fullname"]))                {
                    MenuInfo mmmi = new MenuInfo()                    {
                        mnu_nm = d["title"],
                        mnu_url = d["url"],
                        pgm_id = d["fullname"],
                        mnu_cd = d["name"],
                        owner_id = ownerMenu.mnu_id,
                        OwnerMenu = ownerMenu
                    };

                    Source.Add(mmmi);
                    ownerMenu.Children.Add(mmmi);
                }


              }


            }




          }
          else          {





              string aaaa = "";
              
          }
          ContextMenuService.Close();
          StateHasChanged();
            }
         );
    }


}
