@page "/proj-table-comment";
@{
  /* description : 테이블 관리
  * title : 테이블 관리
  * sort : 2
  * credt : 2021-09-01
  * author : quristyle
  */
}
@inherits PageBaseComponent


<RadzenSplitter Orientation="Orientation.Horizontal"style=" border: 1px solid rgba(0,0,0,.08); height:90vh;">


  <!-- 왼쪽 -->
  <RadzenSplitterPane  Size="50%" Min="10%" Max="90%">

    <!-- 왼쪽 컨텐츠 -->
    <RadzenSplitter Orientation="Orientation.Vertical">
      <!-- 왼쪽 위 컨텐츠 -->
      <RadzenSplitterPane Size="60%" Min="10%" Max="90%">
        <!-- 왼쪽 조회부 -->
        <RadzenStack Orientation="Orientation.Horizontal"  Gap="4px">

          <QuriDropDown @bind-Value="tableName" CodeId="projlist" />
          <QuriDropDown @bind-Value="dbType" CodeId="projdb" Etc0=@tableName?.Code IsEtcFix=true />
          <RadzenButton Click="@Search" Text="Search" />

        </RadzenStack>

        <!-- left table -->
        <RadzenStack Orientation="Orientation.Vertical" Style="height:calc(100% - 38px);" Gap="4px">


          
          @* RowSelect=OnRowSelect
           RowUpdate="@OnUpdateRow" 
           CellClick="@OnCellClick"
           
           *@


          <QuriGrid 
            @bind-Value=@selectedTable
            @ref=@_tGrd
            KeySelector=@(i=>i.TableName)
           RowUpdate="@OnUpdateRow" 
                 CellClick=OnCellClick
                 RowSelect=OnRowSelect
          TItem="TableInfo"
            Sort="@(args => _tGrd.Reset())" Page="@(args => _tGrd.Reset())" Filter="@(args => _tGrd.Reset())"
          
          >
            <Columns>
              <RadzenDataGridColumn TItem="TableInfo" title="TableName" Property="TableName"  />

              <RadzenDataGridColumn TItem="TableInfo" Property="Description" Title="Desc" IsInEditMode="@_tGrd.IsEditing">
                  <Template Context="order">
                      <RadzenText Text="@(order.Description)" />
                  </Template>
                  <EditTemplate Context="order">
                      <RadzenTextBox  Change="@(args => _tGrd.Update())" @bind-Value="order.Description" Name="Description" aria-label="Enter Description" />
                      <RadzenRequiredValidator Text="Description is required" Component="Description" Popup="true" />
                  </EditTemplate>
              </RadzenDataGridColumn>

            </Columns>
          </QuriGrid>



        </RadzenStack>

      </RadzenSplitterPane>

      <!-- 왼쪽 아래 컨텐츠 -->
      <RadzenSplitterPane Size="40%" Min="10%" Max="90%">

        <RadzenStack Orientation="Orientation.Horizontal" Style="height:100%;" Gap="4px">
          <!-- left columns -->
      

          <QuriGrid 
            @bind-Value=@selectedColumn
            @ref=@_cGrd            
            KeySelector=@(i=>i.ColunmName)
           RowUpdate="@OnUpdateColumnDesc" 
                 CellClick=@( args => _cGrd.OnCellClickCehck(args))
            TItem="ColumnInfo"
            RowSelect=OnRowSelectCol
            >
              <Columns>
                <RadzenDataGridColumn TItem="ColumnInfo" title="ColunmName" Property="ColunmName" />
                
              <RadzenDataGridColumn TItem="ColumnInfo" Property="Description" Title="Desc" IsInEditMode="@_cGrd.IsEditing">
                  <Template Context="order">
                      <RadzenText Text="@(order.Description)" />
                  </Template>
                  <EditTemplate Context="order">
                      <RadzenTextBox  Change="@(args => _cGrd.Update())" @bind-Value="order.Description" Name="Description" aria-label="Enter Description" />
                      <RadzenRequiredValidator Text="Description is required" Component="Description" Popup="true" />
                  </EditTemplate>
              </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="ColumnInfo" title="Type" Property="Type_NM" />
                <RadzenDataGridColumn TItem="ColumnInfo" title="Null" Property="NullAble" />
                <RadzenDataGridColumn TItem="ColumnInfo" title="Ident" Property="Ident" />
              </Columns>
          </QuriGrid>



        </RadzenStack>
      </RadzenSplitterPane>

    </RadzenSplitter>

  </RadzenSplitterPane>


  <!-- 오른쪽 -->
  <RadzenSplitterPane Size="50%" Min="10%" Max="90%" >


    <!-- 오른쪽 컨텐츠 -->
    <RadzenSplitter Orientation="Orientation.Vertical">
      <!-- 오른쪽 위 컨텐츠 -->
      <RadzenSplitterPane Size="60%" Min="10%" Max="90%" Style="height:100%;">

        <!-- 오른쪽 조회부 -->
        <RadzenStack Orientation="Orientation.Vertical" Style="height:100%;" Gap="4px">

          <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
            <QuriDropDown @bind-Value="projectName2" CodeId="projlist" />
            <QuriDropDown @bind-Value="dbType2" CodeId="projdb" Etc0=@projectName2?.Code IsEtcFix=true />
            <div class="rz-p-2 rz-text-align-center">
              <RadzenCheckBox @bind-Value="IsSameTable" title="Exsit Description" Name="SameTableCB" />
              <RadzenLabel Text="동일 테이블명" Component="SameTableCB" class="rz-ms-2 rz-me-2" />
              <RadzenCheckBox @bind-Value="IsExsitDesc" title="Exsit Description" Name="ExsitColumnCommentCB" />
              <RadzenLabel Text="코멘트 존재" Component="ExsitColumnCommentCB" class="rz-ms-2" />
            </div>
            <RadzenButton Click=FindProc Text="프로시저추적" />
          </RadzenStack>

          <RadzenStack Orientation="Orientation.Vertical" Style="height:calc(100% - 38px);" Gap="4px">

            @* <QuriDynamicGrid ActionBtnEvent=OnTableCommentSave  ReqData=DataMenu  /> *@

          </RadzenStack>

        </RadzenStack>

      </RadzenSplitterPane>


      <!-- 오른쪽 아래 컨텐츠 -->
      <RadzenSplitterPane Size="40%" Min="10%" Max="90%">

        <RadzenStack Orientation="Orientation.Vertical" Style="height:100%;" Gap="4px">
           
          @* <QuriDynamicGrid ActionBtnEvent=OnProcCommentSave  ReqData=DataProc  /> *@
           
        </RadzenStack>

      </RadzenSplitterPane>

    </RadzenSplitter>




  </RadzenSplitterPane>


</RadzenSplitter>










@code {

  
  QuriGrid<TableInfo> _tGrd{ get; set; }
  QuriGrid<ColumnInfo> _cGrd{ get; set; }



  CommonCode tableName { get; set; }
  CommonCode projectName2 { get; set; }

  CommonCode dbType { get; set; }
  CommonCode dbType2 { get; set; }



  IList<TableInfo> selectedTable;
  //IList<TableInfo> selectedTable2;
  IList<ColumnInfo> selectedColumn;
  //IList<ColumnInfo> selectedColumn2;


  //public IEnumerable<TableInfo> Data { get; set; }
  //public IEnumerable<ColumnInfo> dataCol { get; set; }

  public ResultInfo<Dictionary<string, object>> DataMenu { get; set; }

  //public IList<IDictionary<string, object>> selectedTProc { get; set; } = new List<IDictionary<string, object>>() { new Dictionary<string, object>() { { "dsl_query", "empty" } } };


  public ResultInfo<Dictionary<string, object>> DataProc { get; set; } = new ResultInfo<Dictionary<string, object>>();



  

    //string columnEditing;
    //List<KeyValuePair<string, string>> editedFields = new List<KeyValuePair<string, string>>();
    //List<TableInfo> ordersToUpdate = new List<TableInfo>();
    public async Task OnCellClick(DataGridCellMouseEventArgs<TableInfo> args) {
      await _tGrd.OnCellClickCehck(args);
    }




    
    void OnUpdateRow(TableInfo order)    {
      //return;
        _tGrd.Reset(order);


        //tableCommentUpdate


        
    Dictionary<string, string> dic = new Dictionary<string, string>() {
      {"db",dbType.Others["db_type"]},
      {"dbnick",dbType.Others["db_nick"]},
      {"schema",dbType.Others["db_schema"]},
      {"table_name", order.TableName },
      {"table_desc", order.Description },
      };

      JsCont<TableInfo>("tableCommentUpdate", dic);

    }

    
    
    void OnUpdateColumnDesc(ColumnInfo cinfo)    {
        _cGrd.Reset(cinfo);

        
    Dictionary<string, string> dic = new Dictionary<string, string>() {
      {"db",dbType.Others["db_type"]},
      {"dbnick",dbType.Others["db_nick"]},
      {"schema",dbType.Others["db_schema"]},
      {"table_name", cinfo.TableName },
      {"column_name", cinfo.ColunmName },
      {"column_desc", cinfo.Description },
      };

      JsCont<ColumnInfo>("columnsCommentUpdate", dic);

    }


    




  bool IsSameTable { get; set; }
  bool IsExsitDesc { get; set; }

  public IList<IDictionary<string, object>>? SelectedItems { get; set; }
  public IList<IDictionary<string, object>>? SelectedItemsMenu { get; set; }
  string FoldName { get; set; }
  string MenuName { get; set; }




  // 왼쪽 테이블 조회
  async Task Search() {

    Dictionary<string, string> dic = new Dictionary<string, string>() {
  {"db",dbType.Others["db_type"]},
  {"dbnick",dbType.Others["db_nick"]},
  {"schema",dbType.Others["db_schema"]},
  {"stp", "tablelist"},

  };

  await _tGrd.Load("tablelist", dic);


    // Data = await DevService.GetList<TableInfo>(dic);
    //var ri = await JsCont<TableInfo>("tablelist", dic);
    //Data = ri.Data;
  }




  // 왼쪽 테이블의 칼럼 조회
  async Task OnRowSelect(TableInfo tableInfo) {
    //return;
    Dictionary<string, string> dic = new Dictionary<string, string>() {
      {"db",dbType.Others["db_type"]},
      {"dbnick",dbType.Others["db_nick"]},
      {"schema",dbType.Others["db_schema"]},
      //{"stp", "columnsOftable"},
      {"table_name", tableInfo.TableName},

    };

    await _cGrd.Load("columnsOftable", dic);


    // var ri = await JsCont<ColumnInfo>("columnsOftable", dic);
    // dataCol = ri.Data;
    StateHasChanged();
  }


  // 왼쪽 테이블의 칼럼 선택
  async Task OnRowSelectCol(ColumnInfo colInfo) {
    return;
    Dictionary<string, string> dic = new Dictionary<string, string>() {
      {"db",dbType2.Others["db_type"]},
      {"dbnick",dbType2.Others["db_nick"]},
      {"schema",dbType2.Others["db_schema"]},
      {"stp", "columnOftable"},
      {"table_name", colInfo.TableName},
      {"column_name", colInfo.ColunmName},
      {"same_talbe", IsSameTable?"Y":""  },
      {"exsit_desc", IsExsitDesc?"Y":""  },

    };

    var ri = await JsCont<Dictionary<string, object>>("columnOftable", dic);
    DataMenu = ri;


    FindProc();
  }


  List<ProcInfo> procList {get;set;}

  // 왼쪽 테이블의 칼럼 에 해당하는 프로시저 문자열 조회
  async Task FindProc() {

    if (procList == null){
      Dictionary<string, string> dic2 = new Dictionary<string, string>() {
        {"db",dbType2.Others["db_type"]},
        {"dbnick",dbType2.Others["db_nick"]},
        {"schema",dbType2.Others["db_schema"]},
        {"stp", "proclist"},
        };

      var ri = await JsCont<ProcInfo>("proclist", dic2);

      procList = ri.Data.Where(i => i.PgType != "sql").ToList();


      DataProc.Cols = new Dictionary<string,string>(){
      {"ProcedureName", "System.String"},
      {"Description", "System.String"},
      {"FindString", "System.String"},
      {"FindComment", "System.String"},
      };

    }

    var colName = selectedColumn[0].ColunmName;


    var result = procList
        .Where(i => i.Routine_Definition != null && i.Routine_Definition.Contains(colName))
        .Select(i => {
          var lines = i.Routine_Definition.Split(new[] { "\r\n", "\n", "\r" }, StringSplitOptions.None);
          string findLine = null;
          string findComment = null;

          foreach (var line in lines) {
            var idx = line.IndexOf(colName);
            if (idx < 0) continue;
            var dashIdx = line.IndexOf("--", idx + colName.Length);
            if (dashIdx < 0) continue;
            var afterDash = line.Substring(dashIdx + 2).Trim();
            if (!string.IsNullOrEmpty(afterDash)) {
              findLine = line;
              findComment = afterDash;
              break;
            }
          }

          return new Dictionary<string, object>
      {
            { "ProcedureName", i.ProcedureName },
            { "Description", i.Description },
            { "ROUTINE_DEFINITION", i.Routine_Definition },
            { "PgType", i.PgType },
            { "FindString", findLine ?? string.Empty },
            { "FindComment", findComment ?? string.Empty }
              };
        })
        .Where(dic => !string.IsNullOrEmpty(dic["FindComment"] as string))
        .ToList();

    Console.WriteLine($"proc count : {result.Count}");

    DataProc.Data = result;

    //DataProc = ri2;

    StateHasChanged();

  }




  private async Task SaveBtnEvent(IDictionary<string, object> dic) {
    var req = WasmUtil.JoinDictionaries(dic, new Dictionary<string, string>() { });
    //var saveobj = await JsiniService.GetList<"sp_projwbssave",IDictionary<string, object>>(req);
  }


  private async Task SaveBtnEventMenu(IDictionary<string, object> dic) {
    var req = WasmUtil.JoinDictionaries(dic, new Dictionary<string, string>() { });
    await DbSave<IDictionary<string, object>>("sp_dev_menu_exec",req);
  }

  private async Task DeleteBtnEventMenu(IDictionary<string, object> dic) {
    var d = WasmUtil.JoinConvert(dic);
    await DbDelete<IDictionary<string, object>>("sp_dev_menu_exec", d);
  }

  private void OnTableCommentSave(IDictionary<string, object> args) {
    MakeMenu(args["colDescription"].ToString());

    Notify(NotificationSeverity.Info, "OnTableCommentSave", $" {args["colDescription"].ToString()} ", 2000);

  }

  private void OnProcCommentSave(IDictionary<string, object> args)  {
    string val = GetDicValueStr(args, "commentText");
    MakeMenu(val);
    Notify(NotificationSeverity.Info, "OnProcCommentSave", $" {val} ", 2000);

  }


  private async Task MakeMenu(string coldesc) {

    if (selectedTable == null || selectedColumn == null ) {
      Notify(NotificationSeverity.Info, "Need To Choice", $"좌우 필수 선택 selectedTable : {(selectedTable == null)} selectedColumn : {(selectedColumn == null)}", 5000, false);
      return;
    }

    Dictionary<string, string> dic = new Dictionary<string, string>() {
      {"db",dbType.Others["db_type"]},
      {"dbnick",dbType.Others["db_nick"]},
      {"schema",dbType.Others["db_schema"]},
      {"table_name", selectedTable[0].TableName},
      {"column_name", selectedColumn[0].ColunmName},
      {"column_desc", coldesc},

      };

    //await DevService.GetList<ColumnInfo>("columnsCommentUpdate", dic);
    var result = await JsCont<ColumnInfo>("columnsCommentUpdate", dic);
    if( result.Code < 0){
        await JsCont<ColumnInfo>("columnsCommentAdd", dic);
    }


  }







}
