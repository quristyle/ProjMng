@page "/dbtool";
@{
  /* description : 개발자 DataBase Tools
  * title : Dev DB Tool
  * sort : 1
  * credt : 2021-09-01
  * author : quristyle
  */
}
@using System.Diagnostics.CodeAnalysis
@using System.Text.Json

@inherits PageBaseComponent

<RadzenCard >
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">

    <QuriSearchs>
      <QuriDropDown @bind-Value="projectName" CodeId="projlist" />
      <QuriDropDown @bind-Value="dbType" CodeId="projdb" Etc0=@projectName?.Code IsEtcFix=true  />
      <RadzenTextBox @bind-Value="srchText" Style="width: 25rem;" />
    </QuriSearchs>

      
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
      <RadzenButton Click="@OnLoad" Text="Search"></RadzenButton>
    </RadzenStack>


  </RadzenStack>
</RadzenCard>

<RadzenTabs TabPosition="TabPosition.Top" 
RenderMode="TabRenderMode.Client"
class="context-body-row"

@bind-SelectedIndex="@tabIndex"
 >
  <Tabs>
    <RadzenTabsItem Text="Proc">


        
<RadzenSplitter Orientation="Orientation.Horizontal" >


  <!-- 왼쪽 -->
  <RadzenSplitterPane  Size="20%" Min="10%" Max="90%">

            <QuriGrid 
                 @ref=@ProcGrd
                @bind-Value=@selectedItems
            TItem="ProcInfo">
              <Columns>
                <RadzenDataGridColumn  TItem="ProcInfo" title="ProcName" Property="ProcedureName" />
                      <RadzenDataGridColumn  TItem="ProcInfo" title="Desc" Property="Description" />
                      @* <RadzenDataGridColumn title="cont" Property="Routine_Definition" /> *@
              </Columns>
            </QuriGrid>



      </RadzenSplitterPane>
      
  <!-- 오른쪽 -->
  <RadzenSplitterPane  Size="80%" Min="10%" Max="90%">

      
                  <QuriCodeEditor @ref="_editor" />



      </RadzenSplitterPane>

      </RadzenSplitter>




    </RadzenTabsItem>















    <RadzenTabsItem Text="Fn">



            <RadzenCard class="rz-my-6">

              <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal">
                <RadzenColumn Size="5">

                  <RadzenDataGrid
                      @bind-Value=@FnSelectedItems
                                  Style="height:100%;"
                                  TItem="ProcInfo"
                                  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                  LogicalFilterOperator="LogicalFilterOperator.And"
                                  AllowFiltering="true"
                                  AllowColumnResize="true"
                                  FilterMode="FilterMode.Simple"
                                  SelectionMode="DataGridSelectionMode.Single"
                                  AllowPaging="false"
                                  AllowSorting="true"
                                  PagerHorizontalAlign="HorizontalAlign.Left"
                                  ShowPagingSummary="true">
                    <Columns>
                      <RadzenDataGridColumn title="Function" Property="ProcedureName" />
                      <RadzenDataGridColumn title="Desc" Property="Description" />
                      <RadzenDataGridColumn title="cont" Property="Routine_Definition" />
                    </Columns>
                  </RadzenDataGrid>

                </RadzenColumn>

                <RadzenColumn Size="7">


                  <QuriCodeEditor @ref="_FnEditor" />


                </RadzenColumn>
              </RadzenRow>

            </RadzenCard>




    </RadzenTabsItem>








    <RadzenTabsItem Text="Table">




        
<RadzenSplitter Orientation="Orientation.Horizontal"style=" border: 1px solid rgba(0,0,0,.08); ">


  <!-- 왼쪽 -->
  <RadzenSplitterPane  Size="20%" Min="10%" Max="90%">

      
            <QuriGrid 
                @ref=_tableGrd
                @bind-Value=@selectedTable
                RowSelect="@OnRowSelect"
            TItem="TableInfo"
            >
              <Columns>
                <RadzenDataGridColumn TItem="TableInfo" title="TableName" Property="TableName" />
                <RadzenDataGridColumn TItem="TableInfo" title="Desc" Property="Description" />
              </Columns>
            </QuriGrid>

      
      </RadzenSplitterPane>
      
  <!-- 오른쪽 -->
  <RadzenSplitterPane  Size="80%" Min="10%" Max="90%">

      
            <QuriGrid 
                @ref=_ColGrd 
            Data="@dataCol"
            TItem="ColumnInfo"
            >
              <Columns>
                <RadzenDataGridColumn TItem="ColumnInfo" title="ColunmName" Property="ColunmName" />
                <RadzenDataGridColumn TItem="ColumnInfo" title="Desc" Property="Description" Width="150px" />
                <RadzenDataGridColumn TItem="ColumnInfo" title="Type" Property="Type_NM" />
                <RadzenDataGridColumn TItem="ColumnInfo" title="Length" Property="Max_LENGTH" />
                <RadzenDataGridColumn TItem="ColumnInfo" title="Null" Property="NullAble" />
                <RadzenDataGridColumn TItem="ColumnInfo" title="Ident" Property="Ident" />
              </Columns>
            </QuriGrid>




      </RadzenSplitterPane>

      </RadzenSplitter>





    </RadzenTabsItem>
    @* table end *@


    <RadzenTabsItem Text="Data">


      
    <QuriDynamicGrid ReqData=@PrevData />




    </RadzenTabsItem>


    <RadzenTabsItem Text="Prop">

      <RadzenCard class="rz-my-6">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap"> 
          <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
            <RadzenText >

              @if( dataCol != null ){
                foreach(var dr in dataCol){
                  @($"{dr.ColunmName},")
                }
              }

            </RadzenText>
          </RadzenStack>
        </RadzenStack>
      </RadzenCard>


      <RadzenCard class="rz-my-6">

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" >

          <RadzenColumn Size="7">
            <pre Style="height:60vh;">
              @SelectedTableProp
            </pre>
          </RadzenColumn>
        </RadzenRow>

      </RadzenCard>




    </RadzenTabsItem>



    <RadzenTabsItem Text="Razer">




      <RadzenCard >

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" >

          <RadzenTextBox Value=@compnentTag />

        </RadzenRow>

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="1rem" >


          <RadzenColumn Size="7">
            <pre Style="height:60vh;">
              @SelectedTableGridColum
            </pre>

          </RadzenColumn>
        </RadzenRow>

      </RadzenCard>





    </RadzenTabsItem>



    <RadzenTabsItem Text="ProcMake">




      <div class="h-100">


                <QuriCodeEditor @ref="_editProc" />

      </div>




    </RadzenTabsItem>



  </Tabs>
</RadzenTabs>

@code {

  CommonCode? projectName { get; set; }
  CommonCode? dbType { get; set; }

  string srchText{get;set;}


  QuriGrid<ProcInfo> ProcGrd{ get; set; }
  QuriGrid<TableInfo> _tableGrd{ get; set; }


  QuriGrid<ColumnInfo> _ColGrd{ get; set; }





  private QuriCodeEditor? _editor;
  private QuriCodeEditor? _FnEditor;
  private QuriCodeEditor? _editProc;

  IEnumerable<CommonCode>? dbTypeList { get; set; }

  IList<ProcInfo> _selectedItems { get; set; } = new List<ProcInfo>() { new ProcInfo() { Routine_Definition = "empty" } };
  IList<ProcInfo> selectedItems { 
    get { return _selectedItems; } 
    set { _selectedItems = value;
      _editor.SetValue(_selectedItems[0].Routine_Definition ?? string.Empty);
    } 
  }


  IList<ProcInfo> _FnSelectedItems { get; set; } = new List<ProcInfo>() { new ProcInfo() { Routine_Definition = "empty" } };
  IList<ProcInfo> FnSelectedItems {
    get { return _FnSelectedItems; }
    set {
      _FnSelectedItems = value;
      _FnEditor.SetValue(_FnSelectedItems[0].Routine_Definition ?? string.Empty);
    }
  }


  IList<TableInfo>? selectedTable;
  //ProcInfo? selected_pi;

  //string? SelectedColumnComma;
  string? SelectedTableProp;
  string? SelectedTableGridColum;

  string compnentTag = "RadzenDataGridColumn";

  int tabIndex { get; set; } = 0;

  public IEnumerable<ProcInfo>? FnData { get; set; }
  public IEnumerable<ColumnInfo>? dataCol { get; set; }
  //bool isLoading = false;
  //bool isLoading2 = false;
  //bool isLoading3 = false;


  
  public ResultInfo<Dictionary<string, object>> PrevData { get; set; }



  string DBSpMakeString;


  protected async Task OnLoad() {

    if (dbType == null){
      Console.WriteLine("DbType 선택 필수");
      return;
    }


    var dbLogicItem = await DbCont<Dictionary<string, string>>("sp_dev_db_prop_exec", new Dictionary<string, string>() {
      { "db_rid", dbType.Code },
      { "db_pkey", "sp_fmt" }
    });
    if (dbLogicItem.Data == null || dbLogicItem.Data.Count == 0) {
      string dbtype = dbType?.Others["db_type"];

      switch (dbtype) {
        case "MSSQL":
          DBSpMakeString = WasmUtil.MssqlProcMakeBase;
          break;
        case "EDB":
        case "POSTGRESQL":
          DBSpMakeString = WasmUtil.PostgresqlProcMakeBase;
          break;
        default:
          break;
      }

    }
    else {
      DBSpMakeString = dbLogicItem.Data[0]["db_pvalue"] ?? string.Empty;
    }

    if (tabIndex == 0) {
      await LoadProc();
    }
    else if (tabIndex == 1) {
    }
    else if (tabIndex == 2) {
      await LoadTable();
    }
    else if (tabIndex == 3) {
      await LoadPrevData();
    }

    


  }

  Dictionary<string, string> getParams(){

    return new Dictionary<string, string>() {
  {"db",dbType?.Others["db_type"]??string.Empty},
  {"dbnick",dbType?.Others["db_nick"]??string.Empty},
  {"schema",dbType?.Others["db_schema"]??string.Empty},

  };
  }

  protected async Task LoadProc() {

    Dictionary<string, string> dic = getParams();
    dic.Add("param1", srchText);

    

    await ProcGrd.Load("proclist", dic);
    return;

    // isLoading = true;
    // var ri = await devService.GetList<ProcInfo>("proclist", dic);
    // FnData = ri.Data.Where(i => i.PgType == "sql").ToList();
    // data = ri.Data.Where(i => i.PgType != "sql").ToList();

    // if (data != null && data.ToList().Count > 0 ){
    //   selectedItems = new List<ProcInfo>(){ data.ToList().FirstOrDefault() };
    // }
    //  isLoading = false;
  }


  protected async Task LoadTable() {


    Dictionary<string, string> dic = getParams();


    await _tableGrd.Load("tablelist", dic);
    return;



    // dic.Add("stp", "tablelist");
    // isLoading2 = true;
    // var ri = await devService.GetList<TableInfo>("tablelist", dic);
    // dataTb = ri.Data;
    // isLoading2 = false;
  }
  
  protected async Task LoadPrevData() {

    if( selectedTable != null && selectedTable.Count > 0 ){

    string query = $"select * from {selectedTable[0].TableName} where rownum < 10";

    PrevData = await JsContQuery<Dictionary<string, object>>(dbType?.Others["db_nick"], query);

    }
    else{
      Notify(NotificationSeverity.Error, "", "need to selected Table", 1000);
    }

  }




  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    //await OnLoad();
  }



  async Task OnRowSelect(TableInfo tableInfo) {



    string dbtype = dbType?.Others["db_type"];
    string dbSchema = dbType?.Others["db_schema"];
    string prefix = "p_";
    string prefix2 = "p_";
    string varstr = "character varying";
    string spStr = DBSpMakeString;

    switch (dbtype) {
      case "MSSQL":
        prefix = "@p_";
        prefix2 = "@p_";
        varstr = "varchar(100)";
        break;
      case "AWG":
        prefix = "p_";
        break;
      case "EDB":
        prefix = "IN p_";
        prefix2 = "p_";
        varstr = "character varying";
        break;
      case "POSTGRESQL":
        prefix = "IN p_";
        prefix2 = "p_";
        varstr = "character varying";
        break;
      case "oracle":
        prefix = "p_";
        break;
      case "mysql":
        prefix = "";
        break;
      default:
        prefix = "p_";
        break;
    }

    Dictionary<string, string> dic = getParams();
    dic.Add("table_name", tableInfo.TableName ?? string.Empty);

   dataCol = await _ColGrd.Load("columnsOftable", dic);




   // var ri = await devService.GetList<ColumnInfo>("columnsOftable", dic);
   // dataCol = ri.Data;

    SelectedTableProp = "";
    SelectedTableGridColum = "";

    foreach (var dr in dataCol) {
      SelectedTableProp += $"public string {dr.ColunmName} {"{"}get; set; {"}"}" + System.Environment.NewLine;
      SelectedTableGridColum += $"<{compnentTag} title=\"{(string.IsNullOrWhiteSpace(dr.ColDescription) ? dr.ColunmName:dr.ColDescription)}\" Property=\"{dr.ColunmName}\" />" + System.Environment.NewLine;
    }

    string nowdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm");





    if (!string.IsNullOrEmpty(spStr)) {
      spStr = spStr.Replace("quri_TableName_quri", tableInfo.TableName);
      spStr = spStr.Replace("quri_date_quri", nowdate);
      spStr = spStr.Replace("quri_cols_quri", string.Join($"{System.Environment.NewLine},", dataCol.Select(c => c.ColunmName + $" -- " + c.Description)));
      spStr = spStr.Replace("quri_in_cols_quri", string.Join($"{System.Environment.NewLine}, ", dataCol.Select(c => $"{prefix}" + c.ColunmName + $" {varstr}" + $" -- " + c.Description)));
      spStr = spStr.Replace("quri_schema_quri", dbSchema);
      spStr = spStr.Replace("quri_keycol_quri", dataCol.Select(c => c.ColunmName).First());
      spStr = spStr.Replace("quri_p_cols_quri", string.Join($"{System.Environment.NewLine}, ", dataCol.Select(c => $"{prefix2}" + c.ColunmName + $" -- " + c.Description)));
      spStr = spStr.Replace("quri_up_cols_quri", string.Join($"{System.Environment.NewLine}, ", dataCol.Select(c => c.ColunmName + $" = {prefix2}" + c.ColunmName + $" -- " + c.Description)));
      spStr = spStr.Replace("quri_cols_comment_quri", string.Join($"{System.Environment.NewLine}, ", dataCol.Select(c => c.ColunmName + $" -- " + c.Description)));
    }

  await  _editProc.SetValue(spStr);

    StateHasChanged();

  }




}

