@page "/dbtool";
@{
  /* description : 개발자 DataBase Tools
  * title : Dev DB Tool
  * sort : 1
  * credt : 2021-09-01
  * author : quristyle
  */
}
@using ProjMngWasm.Models;
@using ProjMngWasm.Services;
@using System.Diagnostics.CodeAnalysis
@using System.Text.Json

@inherits PageBaseComponent
<PageTitle>Jsini | Scaner - 개발자 Tool</PageTitle>

<RadzenCard class="rz-my-1">
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap"> 
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
      <QuriDropDown @bind-Value="projectName" CodeId="projlist" />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
      <QuriDropDown @bind-Value="dbType" CodeId="projdb" Etc0=@projectName?.Code IsEtcFix=true  />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
      <RadzenButton Click="@OnLoad" Text="Search"></RadzenButton>
    </RadzenStack>
  </RadzenStack>
</RadzenCard>

<RadzenTabs TabPosition="TabPosition.Top" 
RenderMode="TabRenderMode.Client"
tabindex="@tabIndex"
SelectedIndexChanged="@OnTableChange" >
  <Tabs>
    <RadzenTabsItem Text="Proc">




      <RadzenCard class="rz-my-6">

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" >
          <RadzenColumn Size="5">

            <RadzenDataGrid @bind-Value=@selectedItems
            Style="height:60vh;"
            Data="@data"
            TItem="ProcInfo"
            IsLoading=@isLoading
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            LogicalFilterOperator="LogicalFilterOperator.And"                      
            AllowFiltering="true" 
            AllowColumnResize="true" 
            FilterMode="FilterMode.Simple"
            SelectionMode="DataGridSelectionMode.Single"
            AllowPaging="false" 
            AllowSorting="true"
            PagerHorizontalAlign="HorizontalAlign.Left"

            ShowPagingSummary="true">
              <Columns>
                <RadzenDataGridColumn title="ProcName" Property="ProcedureName" />
                <RadzenDataGridColumn title="Desc" Property="Description" />
              </Columns>
            </RadzenDataGrid>

          </RadzenColumn>

          <RadzenColumn Size="7">


                  <StandaloneCodeEditor @ref="_editor" CssClass="code-editor" ConstructionOptions="appData.FnPgsqlOtion" />


          </RadzenColumn>
        </RadzenRow>

      </RadzenCard>



    </RadzenTabsItem>

    @* table *@
    <RadzenTabsItem Text="Table">





      <RadzenCard class="rz-my-6">

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" >
          <RadzenColumn Size="4">

            <RadzenDataGrid @bind-Value=@selectedTable
            Style="height:60vh;"
            Data="@dataTb"
            TItem="TableInfo"
            IsLoading=@isLoading2
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            LogicalFilterOperator="LogicalFilterOperator.And"
            AllowFiltering="true"
            AllowColumnResize="true"
            FilterMode="FilterMode.Simple"
            SelectionMode="DataGridSelectionMode.Single"
            AllowPaging="false"
            AllowSorting="true"
            PagerHorizontalAlign="HorizontalAlign.Left"
            RowSelect="@OnRowSelect"
            ShowPagingSummary="true">
              <Columns>
                <RadzenDataGridColumn title="TableName" Property="TableName" />
                <RadzenDataGridColumn title="Desc" Property="Description" />
              </Columns>
            </RadzenDataGrid>

          </RadzenColumn>



          <RadzenColumn Size="8">

            <RadzenDataGrid 
            Style="height:60vh;"
            Data="@dataCol"
            TItem="ColumnInfo"
            IsLoading=@isLoading3
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            LogicalFilterOperator="LogicalFilterOperator.And"
            AllowColumnResize="true"
            SelectionMode="DataGridSelectionMode.Single"
            AllowPaging="false"
            AllowSorting="true"

            PagerHorizontalAlign="HorizontalAlign.Left"
            ShowPagingSummary="true">
              <Columns>
                <RadzenDataGridColumn title="ColunmName" Property="ColunmName" />
                <RadzenDataGridColumn title="Desc" Property="Description" Width="150px" />
                <RadzenDataGridColumn title="Type" Property="Type_NM" />
                <RadzenDataGridColumn title="Length" Property="Max_LENGTH" />
                <RadzenDataGridColumn title="Null" Property="NullAble" />
                <RadzenDataGridColumn title="Ident" Property="Ident" />
              </Columns>
            </RadzenDataGrid>

          </RadzenColumn>



        </RadzenRow>

      </RadzenCard>





    </RadzenTabsItem>
    @* table end *@


    <RadzenTabsItem Text="Data">
    </RadzenTabsItem>


    <RadzenTabsItem Text="Prop">

      <RadzenCard class="rz-my-6">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap"> 
          <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
            <RadzenText >

              @foreach(var dr in dataCol){
                @($"{dr.ColunmName},")
              }

            </RadzenText>
          </RadzenStack>
        </RadzenStack>
      </RadzenCard>


      <RadzenCard class="rz-my-6">

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" >

          <RadzenColumn Size="7">
            <pre Style="height:60vh;">
              @SelectedTableProp
            </pre>
          </RadzenColumn>
        </RadzenRow>

      </RadzenCard>




    </RadzenTabsItem>





    <RadzenTabsItem Text="Razer">




      <RadzenCard >

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" >

          <RadzenTextBox Value=@compnentTag />

        </RadzenRow>

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="1rem" >


          <RadzenColumn Size="7">
            <pre Style="height:60vh;">
              @SelectedTableGridColum
            </pre>

          </RadzenColumn>
        </RadzenRow>

      </RadzenCard>





    </RadzenTabsItem>












    <RadzenTabsItem Text="ProcMake">




      <RadzenCard>

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal">

          <RadzenTextBox Value=@compnentTag />

        </RadzenRow>

        <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="1rem">


          <RadzenColumn Size="7">

            <RadzenButton Click="@CopyTextToClipboard" Text="Copy"></RadzenButton>

            <StandaloneCodeEditor @ref="_editProc" CssClass="code-editor" ConstructionOptions="appData.FnPgsqlOtion" />

          </RadzenColumn>
        </RadzenRow>

      </RadzenCard>





    </RadzenTabsItem>


































  </Tabs>
</RadzenTabs>

@code {

  CommonCode? projectName { get; set; }
  CommonCode? dbType { get; set; }

  private StandaloneCodeEditor? _editor;
  private StandaloneCodeEditor?   _editProc;

  IEnumerable<CommonCode>? dbTypeList { get; set; }

  IList<ProcInfo> _selectedItems { get; set; } = new List<ProcInfo>() { new ProcInfo() { Routine_Definition = "empty" } };
  IList<ProcInfo> selectedItems { 
    get { return _selectedItems; } 
    set { _selectedItems = value;
      _editor.SetValue(_selectedItems[0].Routine_Definition ?? string.Empty);
    } 
  }
  IList<TableInfo>? selectedTable;
  //ProcInfo? selected_pi;

  //string? SelectedColumnComma;
  string? SelectedTableProp;
  string? SelectedTableGridColum;

  string compnentTag = "RadzenDataGridColumn";

  int tabIndex { get; set; } = 0;

  public IEnumerable<ProcInfo>? data { get; set; }
  public IEnumerable<TableInfo>? dataTb { get; set; }
  public IEnumerable<ColumnInfo>? dataCol { get; set; }
  bool isLoading = false;
  bool isLoading2 = false;
  bool isLoading3 = false;

  protected async Task OnLoad() {

    if (dbType == null){
      Console.WriteLine("DbType 선택 필수");
      return;
    }

    if (tabIndex == 0) {
      await LoadProc();
    }
    else if (tabIndex == 1) {
      await LoadTable();
    }
    else if (tabIndex == 2) {
    }
  }

  Dictionary<string, string> getParams(){

    return new Dictionary<string, string>() {
  {"db",dbType?.Others["db_type"]??string.Empty},
  {"dbnick",dbType?.Others["db_nick"]??string.Empty},
  {"schema",dbType?.Others["db_schema"]??string.Empty},

  };
  }

  protected async Task LoadProc() {

    Dictionary<string, string> dic = getParams();
    dic.Add("stp", "proclist");

    isLoading = true;
    var ri = await DevService.GetList<ProcInfo>("proclist", dic);
    data = ri.Data;

    if (data != null && data.ToList().Count > 0 ){
      selectedItems = new List<ProcInfo>(){ data.ToList().FirstOrDefault() };
    }
    isLoading = false;
  }


  protected async Task LoadTable() {
    Dictionary<string, string> dic = getParams();
    dic.Add("stp", "tablelist");
    isLoading2 = true;
    var ri = await DevService.GetList<TableInfo>("tablelist", dic);
    dataTb = ri.Data;
    isLoading2 = false;
  }




  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    //await OnLoad();
  }



  async Task OnRowSelect(TableInfo tableInfo) {

    Dictionary<string, string> dic = getParams();
    dic.Add("stp", "columnsOftable");
    dic.Add("table_name", tableInfo.TableName ?? string.Empty);
    isLoading3 = true;
    var ri = await DevService.GetList<ColumnInfo>("columnsOftable", dic);
    dataCol = ri.Data;

    SelectedTableProp = "";
    SelectedTableGridColum = "";

    string sp_colstr = "";
    string c_cols = "";
    string _col = "";
    foreach (var dr in dataCol) {
      SelectedTableProp += $"public string {dr.ColunmName} {"{"}get; set; {"}"}" + System.Environment.NewLine;
      SelectedTableGridColum += $"<{compnentTag} title=\"{dr.ColunmName}\" Property=\"{dr.ColunmName}\" />" + System.Environment.NewLine;
      if (!string.IsNullOrEmpty(sp_colstr)){
        sp_colstr += "  , ";
      }
      else{
        sp_colstr += "    ";
      }
      sp_colstr += $"IN p_{dr.ColunmName}  character varying {System.Environment.NewLine}";
      if (!string.IsNullOrEmpty(c_cols)) {
        c_cols += "  , ";
      }
      else {
        c_cols += "    ";
      }
      c_cols += $"a.{dr.ColunmName} {System.Environment.NewLine}";
      if (string.IsNullOrEmpty(_col)){
        _col=dr.ColunmName;
      }
    }

    string nowdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm");
    string spStr = $@"
/* description : 해당 테이블 또는 프로그램명 등..
 * writer      : quristyle
 * date        : {nowdate}
 */
CREATE OR REPLACE PROCEDURE projmng.sp_{tableInfo.TableName}_exec({System.Environment.NewLine}
{sp_colstr}  , IN p_req_type character varying
  , INOUT p_cur refcursor
)
 LANGUAGE plpgsql
AS $procedure$

declare

	BEGIN



    if p_req_type = 'save' then

      if ( select count(*)
             from projmng.{tableInfo.TableName}
	        where {_col} = p_{_col} ) > 0 then

	      update projmng.{tableInfo.TableName}
	         set {_col} = p_{_col}
	       where {_col} = p_{_col}
	      ;

      else

	      insert into projmng.{tableInfo.TableName}
	      ( {_col} )
	      values
	      ( p_{_col} )
	      ;

      end if;

    end if;









      open p_cur for

      select {c_cols}
        from projmng.{tableInfo.TableName} a
       where 1=1
         and ( ( nvl(p_{_col}, '') = '' and 1=1  )
             or  ( nvl(p_{_col}, '') != '' and a.{_col} = p_{_col}::int )
             )

      ;


	END;

$procedure$
;


";


  await  _editProc.SetValue(spStr);

    isLoading3 = false;
    StateHasChanged();

  }


  private async Task CopyTextToClipboard() {
    var str = await _editProc.GetValue();

   await JSRuntime.InvokeVoidAsync("copyClipboard", str);
  }

async void OnTableChange(int index) {
  tabIndex = index;
}


}

