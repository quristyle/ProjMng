@page "/projdb-tester";
@using System.Text.RegularExpressions
@{
  /* description : DB 정보 테스트
  * title : DB Query
  * sort : 3
  * credt : 2021-09-01
  * author : quristyle
  */
}

@inherits PageBaseComponent

<RadzenCard >
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">


    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="4px">
      <QuriDropDown @bind-Value="srtype" CodeId="projlist" />
      <QuriDropDown @bind-Value="dbType" CodeId="projdb" Etc0=@srtype?.Code IsEtcFix=true />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
      <RadzenButton Click="@OnLoadWrkAll" Text="Excute" />
    </RadzenStack>

  </RadzenStack>
</RadzenCard>

  
<RadzenSplitter Orientation="Orientation.Vertical" class="context-body-row">

  <RadzenSplitterPane  Size="60%" Min="10%" Max="90%">
    <QuriCodeEditor @ref="_editor" KeyDownEvent=OnKeyDown  />
  </RadzenSplitterPane>

  <RadzenSplitterPane Size="40%" Min="10%" Max="90%">

    <div class="position-absolute z-3 end-0 p-2">
      @if(IsLoading){        
      <div class="spinner-border spinner-border-sm" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      }
      <div class="badge bg-secondary" role="status">
        <span class="">@ResultMessage</span>
      </div>
    </div>




    <QuriDynamicGrid ReqData=Data />
  </RadzenSplitterPane>

</RadzenSplitter>



@code {
  
  bool IsLoading { get; set; } = true;
  string ResultMessage { get; set; } = "Ready ...";

  CommonCode? srtype { get; set; }
  CommonCode? dbType { get; set; }
  QuriCodeEditor? _editor;

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
  }


  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
    }
  }



  public ResultInfo<Dictionary<string, object>>? Data { get; set; }


  protected async Task OnKeyDown(KeyboardEvent e) {
     
    Console.WriteLine($" keydown tester : {e.KeyCode}");

    if (e.CtrlKey && e.KeyCode == KeyCode.Enter) {      
      await OnLoadWrk();
    }
    else if( e.KeyCode == KeyCode.F5 ){
      await OnLoadWrkAll(); 
    }


  }

  protected async Task OnLoadWrk() {

      string query = await _editor.GetCursorPosValue();
     await LoadData( query);

  }

  
  protected async Task OnLoadWrkAll() {

      string query = await _editor.GetValue();
     await LoadData( query);

  }


  
  protected async Task LoadData(string query) {
      //로딩바 시작
      IsLoading = true;
      ResultMessage = "Loading ...";
      
      LoadDataResult( query);
  }
  
  
  protected async Task LoadDataResult(string query) {

      var ri = await JsContQuery<Dictionary<string, object>>(dbType, query, true);

      // 결과 표현
      ResultMessage = $" time : {ri.Res.GetValue("dtgap")} sec";
      // 로딩바 종료.
      IsLoading = false;
      Data = ri;
      StateHasChanged();
  }


}
