@page "/source-trace";
@{ 
  /* description : 소스 추적기
   * title : 소스 추적기
  * sort : 1
  * credt : 2025-07-10
  * author : quristyle
  */
}

@inherits PageBaseComponent

<RadzenCard >
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >

    
    
    <QuriSearchs AllLoadComplete=OnLoadWrk >
      <QuriDropDown @bind-Value="projectName" CodeId="projlist" />
      <QuriDropDown @bind-Value="SrouceName" CodeId="sourcelist" Etc0=@projectName?.Code />
      <QuriDropDown @bind-Value="SrouceLang" CodeId="SOURCE_LANG"  />
    </QuriSearchs>


    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
      <RadzenButton Click="@OnLoadWrk" Text="Search" />
    </RadzenStack>

  </RadzenStack>
</RadzenCard>



        
<RadzenSplitter Orientation="Orientation.Horizontal" class="context-body-row" >

  
  <!-- 왼쪽 -->
  <RadzenSplitterPane  Size="30%" Min="10%" Max="90%">
    <QuriDynamicGrid  
      ReqData=@Data 
      @bind-SItems=SelectedItems
      HiddenCols="activity,resultkey,src_rid,dao,transitionvalue"
      AllowPaging=true />
  </RadzenSplitterPane>
  <!-- 오른쪽 -->
  <RadzenSplitterPane  Size="70%" Min="10%" Max="90%">
      <QuriCodeEditor @ref="_editor" EditOption="html" />
  </RadzenSplitterPane>

</RadzenSplitter>


@code {
  
  CommonCode? projectName { get; set; }
  CommonCode? SrouceName { get; set; }
  CommonCode? SrouceLang { get; set; }
  private QuriCodeEditor? _editor;

  
  IList<IDictionary<string, object>> _selectedItems { get; set; } 

  public IList<IDictionary<string, object>> SelectedItems { 
    get { return _selectedItems; } 
    set { 
      if( _selectedItems != value ){
        _selectedItems = value; 
        LoadContext(_selectedItems[0]?["fullpath"] + "");
        //_editor.SetValue(_selectedItems[0]?["fullpath"] + "");
      }
    } 
  }

  
  protected async Task LoadContext(string fullpath) {
    var finfo = await MdCont<Dictionary<string, object>>("md_source_context", new Dictionary<string, string>(){{"fullpath",fullpath}});
  
    _editor.SetValue( finfo.Data?[0]["context"].ToString() );
  }



  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
     // OnLoadWrk();
    }
  }

  public ResultInfo<Dictionary<string, object>> Data { get; set; }

  protected async Task OnLoadWrk() {
  Data = await MdCont<Dictionary<string, object>>("md_source_trace", new Dictionary<string, string>(){{"prj_rid",projectName?.Code}, {"src_rid",SrouceName?.Code}, {"src_lang",SrouceLang?.Code}});
  
  //Data = new();
  StateHasChanged();
  }

  



}
