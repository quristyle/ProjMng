@page "/glue";
@{ 
  /* description : 글루 process 추적기
   * title : 글루 추적기
  * sort : 1
  * credt : 2025-07-01
  * author : quristyle
  */
}

@inherits PageBaseComponent

<RadzenCard >
  <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" >

    
    
    <QuriSearchs>
      <QuriDropDown @bind-Value="projectName" CodeId="projlist" />
      <QuriDropDown @bind-Value="SrouceName" CodeId="sourcelist" Etc0=@projectName?.Code />
    </QuriSearchs>


    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="4px">
      <RadzenButton Click="@OnLoadWrk" Text="Search" />
      <RadzenButton Click="@OnSaveWrk" Text="Save" />
    </RadzenStack>

  </RadzenStack>
</RadzenCard>





<RadzenSplitter Orientation="Orientation.Horizontal" class="context-body-row" >


  <!-- 왼쪽 -->
  <RadzenSplitterPane  Size="60%" Min="10%" Max="90%">




    <QuriDynamicGrid  
      ReqData=@Data 
      @bind-SItems=SelectedItems
      HiddenCols="activity,resultkey,src_rid,dao,transitionvalue,active_context"
      AllowPaging=true />

      
</RadzenSplitterPane>


  <!-- 왼쪽 -->
  <RadzenSplitterPane  Size="40%" Min="10%" Max="90%">


    
                  <QuriCodeEditor @ref="_editor" />

      
</RadzenSplitterPane>



</RadzenSplitter>





@code {
  
  private QuriCodeEditor? _editor;

  CommonCode? projectName { get; set; }
  CommonCode? SrouceName { get; set; }


  
  IList<IDictionary<string, object>> _selectedItems { get; set; } 

  public IList<IDictionary<string, object>> SelectedItems { 
    get { return _selectedItems; } 
    set { 
      if( _selectedItems != value ){
        _selectedItems = value; 
        LoadContext(_selectedItems[0]);
        //_editor.SetValue(_selectedItems[0]?["fullpath"] + "");
      }
    } 
  }

  
  protected async Task LoadContext(IDictionary<string,object> dic) {

    // 여기서 쿼리key 에 사용가능한 쿼리를 가지고 온다.
    
    string atype = dic.GetValue("activity_type");
    if( atype == "sql" ){
      
      string active_context = dic.GetValue("active_context");
  
      _editor.SetValue( active_context );

    }
    else{
      
    _editor.SetValue( "" );
    }
  }




  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      OnLoadWrk();
    }
  }

  public ResultInfo<Dictionary<string, object>> Data { get; set; }

  protected async Task OnLoadWrk() {
    Data = await DbCont<Dictionary<string, object>>("sp_dev_activityinfo_exec", new Dictionary<string, string>(){{"prj_rid",projectName?.Code}, {"src_rid",SrouceName?.Code}});

  StateHasChanged();
  }

  
  protected async Task OnSaveWrk() {
    MdCont<Dictionary<string, object>>("md_glue_service", new Dictionary<string, string>(){{"prj_rid",projectName?.Code}, {"src_rid",SrouceName?.Code}});
    Notify(NotificationSeverity.Info, "정보", "back ground 동작함 알아서 도니깐 이제 신경 끄셔도 됩니다.", 5000);
  }




}
